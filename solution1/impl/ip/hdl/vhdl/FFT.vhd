-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    c_ce1 : OUT STD_LOGIC;
    c_we1 : OUT STD_LOGIC;
    c_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of FFT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage4 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage5 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage6 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage7 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage8 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage9 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage10 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage11 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage12 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage13 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage14 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage15 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage16 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage17 : STD_LOGIC_VECTOR (51 downto 0) := "0000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage18 : STD_LOGIC_VECTOR (51 downto 0) := "0000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage19 : STD_LOGIC_VECTOR (51 downto 0) := "0000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage20 : STD_LOGIC_VECTOR (51 downto 0) := "0000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage21 : STD_LOGIC_VECTOR (51 downto 0) := "0000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage22 : STD_LOGIC_VECTOR (51 downto 0) := "0000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage23 : STD_LOGIC_VECTOR (51 downto 0) := "0001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage24 : STD_LOGIC_VECTOR (51 downto 0) := "0010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (51 downto 0) := "0100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (51 downto 0) := "1000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv39_0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cosVec_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cosVec_ce0 : STD_LOGIC;
    signal cosVec_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sinVec_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sinVec_ce0 : STD_LOGIC;
    signal sinVec_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal wik_reg_291 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_303 : STD_LOGIC_VECTOR (7 downto 0);
    signal wrk_1_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal wik_1_reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state28_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal exitcond_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_reg_965 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_state29_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage14 : signal is "none";
    signal ap_block_state40_pp1_stage14_iter0 : BOOLEAN;
    signal ap_block_pp1_stage14_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage24 : signal is "none";
    signal ap_block_state50_pp1_stage24_iter0 : BOOLEAN;
    signal ap_block_pp1_stage24_11001 : BOOLEAN;
    signal k_3_fu_434_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_3_reg_799 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_804 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_addr_reg_808 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_4_reg_813 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_5_reg_818 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_6_reg_823 : STD_LOGIC_VECTOR (8 downto 0);
    signal q_1_fu_500_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_2_fu_560_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_fu_568_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_4_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_48_fu_582_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_48_reg_851 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal n_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_next_fu_598_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_next_reg_865 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_870 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_mid2_v_v_fu_610_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal wr_mid2_v_v_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_60_fu_632_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_60_reg_886 : STD_LOGIC_VECTOR (30 downto 0);
    signal n_mid2_fu_644_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_mid2_reg_891 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_650_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_61_reg_896 : STD_LOGIC_VECTOR (10 downto 0);
    signal wr_mid2_v_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal wr_mid2_v_reg_901 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal j_3_mid2_fu_659_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_3_mid2_reg_906 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal nb_mid2_reg_922 : STD_LOGIC_VECTOR (31 downto 0);
    signal cp_rec_mid2_fu_671_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal cp_rec_mid2_reg_927 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal cosVec_load_reg_932 : STD_LOGIC_VECTOR (31 downto 0);
    signal sinVec_load_reg_938 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_681_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_reg_944 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_64_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state26_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state51_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal k_4_fu_696_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_4_reg_960 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_addr_7_reg_969 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_8_reg_974 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_9_reg_979 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_addr_10_reg_984 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_reg_989 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage4 : signal is "none";
    signal ap_block_state30_pp1_stage4_iter0 : BOOLEAN;
    signal ap_block_pp1_stage4_11001 : BOOLEAN;
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_79_reg_994 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_reg_999 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_reg_1004 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage6 : signal is "none";
    signal ap_block_state32_pp1_stage6_iter0 : BOOLEAN;
    signal ap_block_pp1_stage6_11001 : BOOLEAN;
    signal tmp_72_reg_1019 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_reg_1024 : STD_LOGIC_VECTOR (31 downto 0);
    signal wrk_reg_1029 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage13 : signal is "none";
    signal ap_block_state39_pp1_stage13_iter0 : BOOLEAN;
    signal ap_block_pp1_stage13_11001 : BOOLEAN;
    signal grp_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal wik_2_reg_1034 : STD_LOGIC_VECTOR (31 downto 0);
    signal di_1_reg_1039 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage15 : signal is "none";
    signal ap_block_state41_pp1_stage15_iter0 : BOOLEAN;
    signal ap_block_pp1_stage15_11001 : BOOLEAN;
    signal tmp_76_reg_1044 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage23 : signal is "none";
    signal ap_block_state49_pp1_stage23_iter0 : BOOLEAN;
    signal ap_block_pp1_stage23_11001 : BOOLEAN;
    signal j_5_fu_782_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_5_reg_1049 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal cp_addr_rec_fu_791_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state26 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage24_subdone : BOOLEAN;
    signal k_reg_175 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_reg_198 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_1_reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal n3_reg_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_232 : STD_LOGIC_VECTOR (10 downto 0);
    signal n_2_reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_255 : STD_LOGIC_VECTOR (7 downto 0);
    signal cp_rec_reg_267 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_phi_mux_d_phi_fu_283_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_wik_phi_fu_295_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_k_1_phi_fu_307_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp1_iter0_wrk_1_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter0_wik_1_reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal cp_s_reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wr_mid2_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_sum_cast_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_sum9_cast_fu_746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_sum1_cast_fu_761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cp_sum2_cast_fu_777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state27_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage22 : signal is "none";
    signal ap_block_state48_pp1_stage22_iter0 : BOOLEAN;
    signal ap_block_pp1_stage22_11001 : BOOLEAN;
    signal ap_block_pp1_stage22 : BOOLEAN;
    signal ap_block_pp1_stage23 : BOOLEAN;
    signal ap_block_pp1_stage24 : BOOLEAN;
    signal grp_fu_349_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage5 : signal is "none";
    signal ap_block_pp1_stage5 : BOOLEAN;
    signal ap_block_pp1_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage7 : signal is "none";
    signal ap_block_pp1_stage7 : BOOLEAN;
    signal ap_block_pp1_stage14 : BOOLEAN;
    signal ap_block_pp1_stage15 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage16 : signal is "none";
    signal ap_block_pp1_stage16 : BOOLEAN;
    signal grp_fu_353_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_360_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_365_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_370_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_370_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_375_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_375_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast3_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i0_fu_450_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_54_fu_461_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i1_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_518_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal rev_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_546_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_cond_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_3_fu_556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_616_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_59_fu_622_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_52_fu_638_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_cast2_fu_678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_cast1_fu_702_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal i0_1_fu_711_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_fu_717_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_sum_fu_721_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_69_fu_731_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_75_cast_fu_737_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_sum9_fu_741_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_76_cast_fu_751_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_sum1_fu_756_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_78_cast_fu_766_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_sum2_fu_772_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal cp_cast_fu_787_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_349_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state33_pp1_stage7_iter0 : BOOLEAN;
    signal ap_block_pp1_stage7_00001 : BOOLEAN;
    signal ap_block_pp1_stage14_00001 : BOOLEAN;
    signal ap_block_pp1_stage15_00001 : BOOLEAN;
    signal ap_block_state31_pp1_stage5_iter0 : BOOLEAN;
    signal ap_block_pp1_stage5_00001 : BOOLEAN;
    signal ap_block_pp1_stage6_00001 : BOOLEAN;
    signal ap_block_state42_pp1_stage16_iter0 : BOOLEAN;
    signal ap_block_pp1_stage16_00001 : BOOLEAN;
    signal grp_fu_353_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_616_ap_start : STD_LOGIC;
    signal grp_fu_616_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_block_pp1_stage4_subdone : BOOLEAN;
    signal ap_block_pp1_stage5_subdone : BOOLEAN;
    signal ap_block_pp1_stage6_subdone : BOOLEAN;
    signal ap_block_pp1_stage7_subdone : BOOLEAN;
    signal ap_block_state34_pp1_stage8_iter0 : BOOLEAN;
    signal ap_block_pp1_stage8_subdone : BOOLEAN;
    signal ap_block_state35_pp1_stage9_iter0 : BOOLEAN;
    signal ap_block_pp1_stage9_subdone : BOOLEAN;
    signal ap_block_state36_pp1_stage10_iter0 : BOOLEAN;
    signal ap_block_pp1_stage10_subdone : BOOLEAN;
    signal ap_block_state37_pp1_stage11_iter0 : BOOLEAN;
    signal ap_block_pp1_stage11_subdone : BOOLEAN;
    signal ap_block_state38_pp1_stage12_iter0 : BOOLEAN;
    signal ap_block_pp1_stage12_subdone : BOOLEAN;
    signal ap_block_pp1_stage13_subdone : BOOLEAN;
    signal ap_block_pp1_stage14_subdone : BOOLEAN;
    signal ap_block_pp1_stage15_subdone : BOOLEAN;
    signal ap_block_pp1_stage16_subdone : BOOLEAN;
    signal ap_block_state43_pp1_stage17_iter0 : BOOLEAN;
    signal ap_block_pp1_stage17_subdone : BOOLEAN;
    signal ap_block_state44_pp1_stage18_iter0 : BOOLEAN;
    signal ap_block_pp1_stage18_subdone : BOOLEAN;
    signal ap_block_state45_pp1_stage19_iter0 : BOOLEAN;
    signal ap_block_pp1_stage19_subdone : BOOLEAN;
    signal ap_block_state46_pp1_stage20_iter0 : BOOLEAN;
    signal ap_block_pp1_stage20_subdone : BOOLEAN;
    signal ap_block_state47_pp1_stage21_iter0 : BOOLEAN;
    signal ap_block_pp1_stage21_subdone : BOOLEAN;
    signal ap_block_pp1_stage22_subdone : BOOLEAN;
    signal ap_block_pp1_stage23_subdone : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_condition_1138 : BOOLEAN;
    signal ap_condition_1141 : BOOLEAN;
    signal ap_condition_1145 : BOOLEAN;

    component voicerec_faddfsubbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_fmul_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component voicerec_sdiv_11ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_cosVec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_sinVec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    cosVec_U : component FFT_cosVec
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cosVec_address0,
        ce0 => cosVec_ce0,
        q0 => cosVec_q0);

    sinVec_U : component FFT_sinVec
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sinVec_address0,
        ce0 => sinVec_ce0,
        q0 => sinVec_q0);

    voicerec_faddfsubbkb_U1 : component voicerec_faddfsubbkb
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_349_p0,
        din1 => grp_fu_349_p1,
        opcode => grp_fu_349_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_349_p2);

    voicerec_faddfsubbkb_U2 : component voicerec_faddfsubbkb
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_353_p0,
        din1 => grp_fu_353_p1,
        opcode => grp_fu_353_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_353_p2);

    voicerec_fmul_32ncud_U3 : component voicerec_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_360_p0,
        din1 => grp_fu_360_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_360_p2);

    voicerec_fmul_32ncud_U4 : component voicerec_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_365_p0,
        din1 => grp_fu_365_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_365_p2);

    voicerec_fmul_32ncud_U5 : component voicerec_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_370_p0,
        din1 => grp_fu_370_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_370_p2);

    voicerec_fmul_32ncud_U6 : component voicerec_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_375_p0,
        din1 => grp_fu_375_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_375_p2);

    voicerec_sdiv_11ndEe_U7 : component voicerec_sdiv_11ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_616_ap_start,
        done => grp_fu_616_ap_done,
        din0 => grp_fu_616_p0,
        din1 => wr_mid2_v_v_fu_610_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_616_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state26) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_64_fu_685_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state26) and (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage24_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage24))))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state26);
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage24_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage24)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_64_fu_685_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp1_iter0_wik_1_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1141)) then 
                    ap_phi_reg_pp1_iter0_wik_1_reg_326 <= ap_phi_mux_wik_phi_fu_295_p4;
                elsif ((ap_const_boolean_1 = ap_condition_1138)) then 
                    ap_phi_reg_pp1_iter0_wik_1_reg_326 <= wik_2_reg_1034;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp1_iter0_wrk_1_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1141)) then 
                    ap_phi_reg_pp1_iter0_wrk_1_reg_314 <= ap_phi_mux_d_phi_fu_283_p4;
                elsif ((ap_const_boolean_1 = ap_condition_1138)) then 
                    ap_phi_reg_pp1_iter0_wrk_1_reg_314 <= wrk_reg_1029;
                end if;
            end if; 
        end if;
    end process;

    cp_rec_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_428_p2 = ap_const_lv1_1))) then 
                cp_rec_reg_267 <= ap_const_lv39_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                cp_rec_reg_267 <= cp_addr_rec_fu_791_p2;
            end if; 
        end if;
    end process;

    cp_s_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state52) and (tmp_64_reg_952 = ap_const_lv1_1))) then 
                                cp_s_reg_338(31 downto 1) <= n_mid2_reg_891(31 downto 1);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_64_fu_685_p2 = ap_const_lv1_0))) then 
                cp_s_reg_338(1) <= '0';
                cp_s_reg_338(2) <= '0';
                cp_s_reg_338(3) <= '0';
                cp_s_reg_338(4) <= '0';
                cp_s_reg_338(5) <= '0';
                cp_s_reg_338(6) <= '0';
                cp_s_reg_338(7) <= '0';
                cp_s_reg_338(8) <= '0';
                cp_s_reg_338(9) <= '0';
                cp_s_reg_338(10) <= '0';
                cp_s_reg_338(11) <= '0';
                cp_s_reg_338(12) <= '0';
                cp_s_reg_338(13) <= '0';
                cp_s_reg_338(14) <= '0';
                cp_s_reg_338(15) <= '0';
                cp_s_reg_338(16) <= '0';
                cp_s_reg_338(17) <= '0';
                cp_s_reg_338(18) <= '0';
                cp_s_reg_338(19) <= '0';
                cp_s_reg_338(20) <= '0';
                cp_s_reg_338(21) <= '0';
                cp_s_reg_338(22) <= '0';
                cp_s_reg_338(23) <= '0';
                cp_s_reg_338(24) <= '0';
                cp_s_reg_338(25) <= '0';
                cp_s_reg_338(26) <= '0';
                cp_s_reg_338(27) <= '0';
                cp_s_reg_338(28) <= '0';
                cp_s_reg_338(29) <= '0';
                cp_s_reg_338(30) <= '0';
                cp_s_reg_338(31) <= '0';
            end if; 
        end if;
    end process;

    d_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_64_fu_685_p2 = ap_const_lv1_1))) then 
                d_reg_279 <= ap_const_lv32_3F800000;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_reg_956 = ap_const_lv1_0))) then 
                d_reg_279 <= wrk_1_reg_314;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_428_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_232 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                indvar_flatten_reg_232 <= indvar_flatten_next_reg_865;
            end if; 
        end if;
    end process;

    j_1_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond2_fu_494_p2 = ap_const_lv1_0))) then 
                j_1_reg_209 <= j_2_fu_560_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_1_reg_209 <= j_reg_186;
            end if; 
        end if;
    end process;

    j_3_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_428_p2 = ap_const_lv1_1))) then 
                j_3_reg_255 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                j_3_reg_255 <= j_5_reg_1049;
            end if; 
        end if;
    end process;

    j_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_186 <= j_4_fu_576_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_186 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    k_1_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_64_fu_685_p2 = ap_const_lv1_1))) then 
                k_1_reg_303 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_reg_956 = ap_const_lv1_0))) then 
                k_1_reg_303 <= k_4_reg_960;
            end if; 
        end if;
    end process;

    k_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                k_reg_175 <= k_3_reg_799;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_175 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    n3_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond2_fu_494_p2 = ap_const_lv1_0))) then 
                n3_reg_220 <= n_1_fu_568_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                n3_reg_220 <= ap_const_lv32_80;
            end if; 
        end if;
    end process;

    n_2_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_428_p2 = ap_const_lv1_1))) then 
                n_2_reg_243 <= ap_const_lv32_2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                n_2_reg_243 <= wr_mid2_v_v_reg_879;
            end if; 
        end if;
    end process;

    q_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond2_fu_494_p2 = ap_const_lv1_0))) then 
                q_reg_198 <= q_1_fu_500_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                q_reg_198 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001))) then 
                reg_390 <= c_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                reg_390 <= c_q0;
            end if; 
        end if;
    end process;

    reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001))) then 
                reg_398 <= c_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                reg_398 <= c_q1;
            end if; 
        end if;
    end process;

    reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0))) then 
                reg_406 <= c_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_406 <= c_q0;
            end if; 
        end if;
    end process;

    reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0))) then 
                reg_414 <= c_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_414 <= c_q1;
            end if; 
        end if;
    end process;

    wik_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_64_fu_685_p2 = ap_const_lv1_1))) then 
                wik_reg_291 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_reg_956 = ap_const_lv1_0))) then 
                wik_reg_291 <= wik_1_reg_326;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_68_fu_706_p2 = ap_const_lv1_1) and (exitcond_fu_690_p2 = ap_const_lv1_0))) then
                c_addr_10_reg_984 <= cp_sum2_cast_fu_777_p1(9 - 1 downto 0);
                c_addr_7_reg_969 <= cp_sum_cast_fu_726_p1(9 - 1 downto 0);
                c_addr_8_reg_974 <= cp_sum9_cast_fu_746_p1(9 - 1 downto 0);
                c_addr_9_reg_979 <= cp_sum1_cast_fu_761_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_444_p2 = ap_const_lv1_1) and (exitcond3_fu_428_p2 = ap_const_lv1_0))) then
                    c_addr_4_reg_813(8 downto 1) <= tmp_55_fu_467_p1(9 - 1 downto 0)(8 downto 1);
                    c_addr_reg_808(8 downto 1) <= tmp_53_fu_456_p1(9 - 1 downto 0)(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    c_addr_5_reg_818(8 downto 1) <= tmp_56_fu_478_p1(9 - 1 downto 0)(8 downto 1);
                    c_addr_6_reg_823(8 downto 1) <= tmp_58_fu_489_p1(9 - 1 downto 0)(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                cosVec_load_reg_932 <= cosVec_q0;
                cp_rec_mid2_reg_927 <= cp_rec_mid2_fu_671_p3;
                sinVec_load_reg_938 <= sinVec_q0;
                tmp_62_reg_944 <= tmp_62_fu_681_p1;
                tmp_64_reg_952 <= tmp_64_fu_685_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage15) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0))) then
                di_1_reg_1039 <= grp_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_flatten_fu_592_p2 = ap_const_lv1_0))) then
                exitcond1_reg_870 <= exitcond1_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_reg_956 <= exitcond_fu_690_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                indvar_flatten_next_reg_865 <= indvar_flatten_next_fu_598_p2;
                    n_reg_856(31 downto 1) <= n_fu_586_p2(31 downto 1);
                tmp_48_reg_851 <= tmp_48_fu_582_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                j_3_mid2_reg_906 <= j_3_mid2_fu_659_p3;
                nb_mid2_reg_922 <= grp_fu_616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                j_5_reg_1049 <= j_5_fu_782_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_3_reg_799 <= k_3_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                k_4_reg_960 <= k_4_fu_696_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    n_mid2_reg_891(31 downto 1) <= n_mid2_fu_644_p3(31 downto 1);
                tmp_60_reg_886 <= tmp_60_fu_632_p3;
                tmp_61_reg_896 <= tmp_61_fu_650_p1;
                wr_mid2_v_v_reg_879 <= wr_mid2_v_v_fu_610_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage24) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage24_11001) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage14) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage14_11001) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0)))) then
                reg_421 <= grp_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_fu_690_p2 = ap_const_lv1_0))) then
                tmp_68_reg_965 <= tmp_68_fu_706_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0))) then
                tmp_72_reg_1019 <= grp_fu_370_p2;
                tmp_73_reg_1024 <= grp_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage23) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0))) then
                tmp_76_reg_1044 <= grp_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0))) then
                tmp_78_reg_989 <= grp_fu_360_p2;
                tmp_79_reg_994 <= grp_fu_365_p2;
                tmp_80_reg_999 <= grp_fu_370_p2;
                tmp_81_reg_1004 <= grp_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_428_p2 = ap_const_lv1_0))) then
                tmp_reg_804 <= tmp_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage15) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                wik_1_reg_326 <= ap_phi_reg_pp1_iter0_wik_1_reg_326;
                wrk_1_reg_314 <= ap_phi_reg_pp1_iter0_wrk_1_reg_314;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage13) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0))) then
                wik_2_reg_1034 <= grp_fu_353_p2;
                wrk_reg_1029 <= grp_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                wr_mid2_v_reg_901 <= wr_mid2_v_fu_654_p2;
            end if;
        end if;
    end process;
    c_addr_reg_808(0) <= '0';
    c_addr_4_reg_813(0) <= '1';
    c_addr_5_reg_818(0) <= '0';
    c_addr_6_reg_823(0) <= '1';
    n_reg_856(0) <= '0';
    n_mid2_reg_891(0) <= '0';
    cp_s_reg_338(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, tmp_fu_444_p2, exitcond3_fu_428_p2, ap_CS_fsm_state7, exitcond2_fu_494_p2, ap_CS_fsm_state9, exitcond_flatten_fu_592_p2, ap_CS_fsm_state25, tmp_64_fu_685_p2, exitcond_fu_690_p2, ap_block_pp1_stage0_subdone, ap_block_pp1_stage24_subdone, ap_block_pp1_stage1_subdone, ap_block_pp1_stage2_subdone, ap_block_pp1_stage3_subdone, ap_block_pp1_stage4_subdone, ap_block_pp1_stage5_subdone, ap_block_pp1_stage6_subdone, ap_block_pp1_stage7_subdone, ap_block_pp1_stage8_subdone, ap_block_pp1_stage9_subdone, ap_block_pp1_stage10_subdone, ap_block_pp1_stage11_subdone, ap_block_pp1_stage12_subdone, ap_block_pp1_stage13_subdone, ap_block_pp1_stage14_subdone, ap_block_pp1_stage15_subdone, ap_block_pp1_stage16_subdone, ap_block_pp1_stage17_subdone, ap_block_pp1_stage18_subdone, ap_block_pp1_stage19_subdone, ap_block_pp1_stage20_subdone, ap_block_pp1_stage21_subdone, ap_block_pp1_stage22_subdone, ap_block_pp1_stage23_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_428_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_428_p2 = ap_const_lv1_0) and (tmp_fu_444_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond2_fu_494_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_flatten_fu_592_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_64_fu_685_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_fu_690_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_fu_690_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_pp1_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                end if;
            when ap_ST_fsm_pp1_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                end if;
            when ap_ST_fsm_pp1_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                end if;
            when ap_ST_fsm_pp1_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage7;
                end if;
            when ap_ST_fsm_pp1_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage8;
                end if;
            when ap_ST_fsm_pp1_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage9;
                end if;
            when ap_ST_fsm_pp1_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage10;
                end if;
            when ap_ST_fsm_pp1_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage11;
                end if;
            when ap_ST_fsm_pp1_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage12;
                end if;
            when ap_ST_fsm_pp1_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage13;
                end if;
            when ap_ST_fsm_pp1_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage14;
                end if;
            when ap_ST_fsm_pp1_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage15;
                end if;
            when ap_ST_fsm_pp1_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage16;
                end if;
            when ap_ST_fsm_pp1_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage17;
                end if;
            when ap_ST_fsm_pp1_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage18;
                end if;
            when ap_ST_fsm_pp1_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage19;
                end if;
            when ap_ST_fsm_pp1_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage20;
                end if;
            when ap_ST_fsm_pp1_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage21;
                end if;
            when ap_ST_fsm_pp1_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage22;
                end if;
            when ap_ST_fsm_pp1_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage23;
                end if;
            when ap_ST_fsm_pp1_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage24;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(25);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(26);
    ap_CS_fsm_pp1_stage13 <= ap_CS_fsm(38);
    ap_CS_fsm_pp1_stage14 <= ap_CS_fsm(39);
    ap_CS_fsm_pp1_stage15 <= ap_CS_fsm(40);
    ap_CS_fsm_pp1_stage16 <= ap_CS_fsm(41);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(27);
    ap_CS_fsm_pp1_stage22 <= ap_CS_fsm(47);
    ap_CS_fsm_pp1_stage23 <= ap_CS_fsm(48);
    ap_CS_fsm_pp1_stage24 <= ap_CS_fsm(49);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(28);
    ap_CS_fsm_pp1_stage4 <= ap_CS_fsm(29);
    ap_CS_fsm_pp1_stage5 <= ap_CS_fsm(30);
    ap_CS_fsm_pp1_stage6 <= ap_CS_fsm(31);
    ap_CS_fsm_pp1_stage7 <= ap_CS_fsm(32);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state52 <= ap_CS_fsm(50);
    ap_CS_fsm_state53 <= ap_CS_fsm(51);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage14_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage15_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage16_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage22_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage23_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage24_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage7_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp1_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp1_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp1_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp1_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp1_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp1_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp1_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp1_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp1_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp1_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp1_stage23_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp1_stage24_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1138_assign_proc : process(exitcond_reg_956, tmp_68_reg_965, ap_CS_fsm_pp1_stage14, ap_block_pp1_stage14_11001)
    begin
                ap_condition_1138 <= ((ap_const_logic_1 = ap_CS_fsm_pp1_stage14) and (ap_const_boolean_0 = ap_block_pp1_stage14_11001) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0));
    end process;


    ap_condition_1141_assign_proc : process(exitcond_fu_690_p2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, tmp_68_fu_706_p2)
    begin
                ap_condition_1141 <= ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_68_fu_706_p2 = ap_const_lv1_0) and (exitcond_fu_690_p2 = ap_const_lv1_0));
    end process;


    ap_condition_1145_assign_proc : process(ap_enable_reg_pp1_iter0, exitcond_reg_956, tmp_68_reg_965)
    begin
                ap_condition_1145 <= ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0));
    end process;


    ap_condition_pp1_exit_iter0_state26_assign_proc : process(exitcond_fu_690_p2)
    begin
        if ((exitcond_fu_690_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, exitcond_flatten_fu_592_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_flatten_fu_592_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_d_phi_fu_283_p4_assign_proc : process(d_reg_279, wrk_1_reg_314, exitcond_reg_956, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_reg_956 = ap_const_lv1_0))) then 
            ap_phi_mux_d_phi_fu_283_p4 <= wrk_1_reg_314;
        else 
            ap_phi_mux_d_phi_fu_283_p4 <= d_reg_279;
        end if; 
    end process;


    ap_phi_mux_k_1_phi_fu_307_p4_assign_proc : process(k_1_reg_303, exitcond_reg_956, ap_CS_fsm_pp1_stage0, k_4_reg_960, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_reg_956 = ap_const_lv1_0))) then 
            ap_phi_mux_k_1_phi_fu_307_p4 <= k_4_reg_960;
        else 
            ap_phi_mux_k_1_phi_fu_307_p4 <= k_1_reg_303;
        end if; 
    end process;


    ap_phi_mux_wik_phi_fu_295_p4_assign_proc : process(wik_reg_291, wik_1_reg_326, exitcond_reg_956, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_reg_956 = ap_const_lv1_0))) then 
            ap_phi_mux_wik_phi_fu_295_p4 <= wik_1_reg_326;
        else 
            ap_phi_mux_wik_phi_fu_295_p4 <= wik_reg_291;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, exitcond_flatten_fu_592_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_flatten_fu_592_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    c_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state2, c_addr_reg_808, c_addr_5_reg_818, ap_CS_fsm_pp1_stage0, c_addr_8_reg_974, c_addr_10_reg_984, ap_CS_fsm_pp1_stage23, ap_enable_reg_pp1_iter1, ap_CS_fsm_state6, ap_block_pp1_stage0, tmp_53_fu_456_p1, tmp_56_fu_478_p1, ap_CS_fsm_state5, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1, ap_block_pp1_stage2, ap_block_pp1_stage23)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage23) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage23) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)))) then 
            c_address0 <= c_addr_8_reg_974;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            c_address0 <= c_addr_10_reg_984;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_address0 <= c_addr_5_reg_818;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_address0 <= c_addr_reg_808;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_address0 <= tmp_56_fu_478_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_address0 <= tmp_53_fu_456_p1(9 - 1 downto 0);
        else 
            c_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    c_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage24, ap_CS_fsm_state2, c_addr_4_reg_813, c_addr_6_reg_823, c_addr_7_reg_969, c_addr_9_reg_979, ap_CS_fsm_state6, tmp_55_fu_467_p1, tmp_58_fu_489_p1, ap_CS_fsm_state5, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1, ap_block_pp1_stage2, ap_CS_fsm_pp1_stage22, ap_block_pp1_stage22, ap_block_pp1_stage24)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage22) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage22) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)))) then 
            c_address1 <= c_addr_7_reg_969;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage24) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage24) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            c_address1 <= c_addr_9_reg_979;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_address1 <= c_addr_6_reg_823;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_address1 <= c_addr_4_reg_813;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_address1 <= tmp_58_fu_489_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_address1 <= tmp_55_fu_467_p1(9 - 1 downto 0);
        else 
            c_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage2_11001, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage23, ap_block_pp1_stage23_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage23) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage2_11001, ap_CS_fsm_pp1_stage24, ap_block_pp1_stage24_11001, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage22, ap_block_pp1_stage22_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_pp1_stage22_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage22) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage24) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage24_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then 
            c_ce1 <= ap_const_logic_1;
        else 
            c_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    c_d0_assign_proc : process(reg_390, ap_enable_reg_pp1_iter0, reg_406, grp_fu_349_p2, reg_421, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage23, ap_enable_reg_pp1_iter1, ap_CS_fsm_state6, ap_block_pp1_stage0, ap_CS_fsm_state5, ap_block_pp1_stage23)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            c_d0 <= reg_421;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage23) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage23) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            c_d0 <= grp_fu_349_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_d0 <= reg_390;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_d0 <= reg_406;
        else 
            c_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_d1_assign_proc : process(ap_enable_reg_pp1_iter0, reg_398, reg_414, grp_fu_349_p2, ap_CS_fsm_pp1_stage24, tmp_76_reg_1044, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_pp1_stage22, ap_block_pp1_stage22, ap_block_pp1_stage24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage24) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage24) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            c_d1 <= tmp_76_reg_1044;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage22) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage22) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            c_d1 <= grp_fu_349_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_d1 <= reg_398;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_d1 <= reg_414;
        else 
            c_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_we0_assign_proc : process(ap_enable_reg_pp1_iter0, exitcond_reg_956, tmp_68_reg_965, tmp_reg_804, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage23, ap_block_pp1_stage23_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_reg_804 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage23) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0)))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_we1_assign_proc : process(ap_enable_reg_pp1_iter0, exitcond_reg_956, tmp_68_reg_965, ap_CS_fsm_pp1_stage24, ap_block_pp1_stage24_11001, tmp_reg_804, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_pp1_stage22, ap_block_pp1_stage22_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_reg_804 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage22_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage22) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage24) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage24_11001) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0)))) then 
            c_we1 <= ap_const_logic_1;
        else 
            c_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cosVec_address0 <= wr_mid2_fu_666_p1(8 - 1 downto 0);

    cosVec_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            cosVec_ce0 <= ap_const_logic_1;
        else 
            cosVec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cp_addr_rec_fu_791_p2 <= std_logic_vector(signed(cp_cast_fu_787_p1) + signed(cp_rec_mid2_reg_927));
        cp_cast_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cp_s_reg_338),39));

    cp_rec_mid2_fu_671_p3 <= 
        ap_const_lv39_0 when (exitcond1_reg_870(0) = '1') else 
        cp_rec_reg_267;
    cp_sum1_cast_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cp_sum1_fu_756_p2),64));
    cp_sum1_fu_756_p2 <= std_logic_vector(unsigned(tmp_76_cast_fu_751_p2) + unsigned(tmp_62_reg_944));
    cp_sum2_cast_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cp_sum2_fu_772_p2),64));
    cp_sum2_fu_772_p2 <= std_logic_vector(unsigned(tmp_78_cast_fu_766_p2) + unsigned(tmp_62_reg_944));
    cp_sum9_cast_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cp_sum9_fu_741_p2),64));
    cp_sum9_fu_741_p2 <= std_logic_vector(unsigned(tmp_75_cast_fu_737_p1) + unsigned(tmp_62_reg_944));
    cp_sum_cast_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cp_sum_fu_721_p2),64));
    cp_sum_fu_721_p2 <= std_logic_vector(unsigned(tmp_39_fu_717_p1) + unsigned(tmp_62_reg_944));
    exitcond1_fu_604_p2 <= "1" when (j_3_reg_255 = ap_const_lv8_80) else "0";
    exitcond2_fu_494_p2 <= "1" when (q_reg_198 = ap_const_lv4_8) else "0";
    exitcond3_fu_428_p2 <= "1" when (k_reg_175 = ap_const_lv9_100) else "0";
    exitcond_flatten_fu_592_p2 <= "1" when (indvar_flatten_reg_232 = ap_const_lv11_400) else "0";
    exitcond_fu_690_p2 <= "1" when (ap_phi_mux_k_1_phi_fu_307_p4 = ap_const_lv8_80) else "0";

    grp_fu_349_opcode_assign_proc : process(ap_enable_reg_pp1_iter0, exitcond_reg_956, tmp_68_reg_965, ap_CS_fsm_pp1_stage14, ap_CS_fsm_pp1_stage6, ap_CS_fsm_pp1_stage15, ap_CS_fsm_pp1_stage5, ap_CS_fsm_pp1_stage7, ap_CS_fsm_pp1_stage16, ap_block_pp1_stage7_00001, ap_block_pp1_stage14_00001, ap_block_pp1_stage15_00001, ap_block_pp1_stage5_00001, ap_block_pp1_stage6_00001, ap_block_pp1_stage16_00001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage16_00001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage16) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage5_00001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage6_00001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0)))) then 
            grp_fu_349_opcode <= ap_const_lv2_1;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage7_00001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage15_00001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage15) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage14_00001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage14) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_68_reg_965 = ap_const_lv1_1) and (exitcond_reg_956 = ap_const_lv1_0)))) then 
            grp_fu_349_opcode <= ap_const_lv2_0;
        else 
            grp_fu_349_opcode <= "XX";
        end if; 
    end process;


    grp_fu_349_p0_assign_proc : process(ap_enable_reg_pp1_iter0, reg_406, reg_414, ap_CS_fsm_pp1_stage14, grp_fu_360_p2, tmp_78_reg_989, ap_CS_fsm_pp1_stage6, tmp_72_reg_1019, ap_CS_fsm_pp1_stage15, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage5, ap_block_pp1_stage6, ap_CS_fsm_pp1_stage7, ap_block_pp1_stage7, ap_block_pp1_stage14, ap_block_pp1_stage15, ap_CS_fsm_pp1_stage16, ap_block_pp1_stage16)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage16) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage16) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage15) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            grp_fu_349_p0 <= reg_414;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage14) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_fu_349_p0 <= reg_406;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_fu_349_p0 <= tmp_72_reg_1019;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_fu_349_p0 <= grp_fu_360_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_fu_349_p0 <= tmp_78_reg_989;
        else 
            grp_fu_349_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_349_p1_assign_proc : process(ap_enable_reg_pp1_iter0, grp_fu_349_p2, ap_CS_fsm_pp1_stage14, grp_fu_365_p2, tmp_79_reg_994, ap_CS_fsm_pp1_stage6, tmp_73_reg_1024, di_1_reg_1039, ap_CS_fsm_pp1_stage15, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage5, ap_block_pp1_stage6, ap_CS_fsm_pp1_stage7, ap_block_pp1_stage7, ap_block_pp1_stage14, ap_block_pp1_stage15, ap_CS_fsm_pp1_stage16, ap_block_pp1_stage16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage16) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage16) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_fu_349_p1 <= di_1_reg_1039;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage15) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage14) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            grp_fu_349_p1 <= grp_fu_349_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_fu_349_p1 <= tmp_73_reg_1024;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_fu_349_p1 <= grp_fu_365_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_fu_349_p1 <= tmp_79_reg_994;
        else 
            grp_fu_349_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_353_opcode_assign_proc : process(ap_CS_fsm_pp1_stage15, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage15_00001, ap_block_pp1_stage5_00001, ap_condition_1145)
    begin
        if ((ap_const_boolean_1 = ap_condition_1145)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage15_00001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage15))) then 
                grp_fu_353_opcode <= ap_const_lv2_1;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage5_00001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5))) then 
                grp_fu_353_opcode <= ap_const_lv2_0;
            else 
                grp_fu_353_opcode <= "XX";
            end if;
        else 
            grp_fu_353_opcode <= "XX";
        end if; 
    end process;


    grp_fu_353_p0_assign_proc : process(ap_enable_reg_pp1_iter0, reg_406, tmp_80_reg_999, ap_CS_fsm_pp1_stage15, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage5, ap_block_pp1_stage15)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage15))) then 
                grp_fu_353_p0 <= reg_406;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5))) then 
                grp_fu_353_p0 <= tmp_80_reg_999;
            else 
                grp_fu_353_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_353_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_353_p1_assign_proc : process(ap_enable_reg_pp1_iter0, reg_421, tmp_81_reg_1004, ap_CS_fsm_pp1_stage15, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage5, ap_block_pp1_stage15)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage15))) then 
                grp_fu_353_p1 <= reg_421;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5))) then 
                grp_fu_353_p1 <= tmp_81_reg_1004;
            else 
                grp_fu_353_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_353_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_360_p0_assign_proc : process(d_reg_279, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, cosVec_load_reg_932, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_block_pp1_stage2)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                grp_fu_360_p0 <= d_reg_279;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                grp_fu_360_p0 <= cosVec_load_reg_932;
            else 
                grp_fu_360_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_360_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_360_p1_assign_proc : process(c_q1, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_phi_mux_d_phi_fu_283_p4, ap_block_pp1_stage0, ap_block_pp1_stage2)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                grp_fu_360_p1 <= c_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                grp_fu_360_p1 <= ap_phi_mux_d_phi_fu_283_p4;
            else 
                grp_fu_360_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_360_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_365_p0_assign_proc : process(wik_reg_291, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, sinVec_load_reg_938, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_block_pp1_stage2)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                grp_fu_365_p0 <= wik_reg_291;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                grp_fu_365_p0 <= sinVec_load_reg_938;
            else 
                grp_fu_365_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_365_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_365_p1_assign_proc : process(c_q0, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_phi_mux_wik_phi_fu_295_p4, ap_block_pp1_stage2)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                grp_fu_365_p1 <= c_q0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                grp_fu_365_p1 <= ap_phi_mux_wik_phi_fu_295_p4;
            else 
                grp_fu_365_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_365_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_370_p0_assign_proc : process(d_reg_279, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, cosVec_load_reg_932, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_block_pp1_stage2)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                grp_fu_370_p0 <= d_reg_279;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                grp_fu_370_p0 <= cosVec_load_reg_932;
            else 
                grp_fu_370_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_370_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_370_p1_assign_proc : process(c_q0, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_phi_mux_wik_phi_fu_295_p4, ap_block_pp1_stage2)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                grp_fu_370_p1 <= c_q0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                grp_fu_370_p1 <= ap_phi_mux_wik_phi_fu_295_p4;
            else 
                grp_fu_370_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_370_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_375_p0_assign_proc : process(wik_reg_291, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, sinVec_load_reg_938, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_block_pp1_stage2)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                grp_fu_375_p0 <= wik_reg_291;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                grp_fu_375_p0 <= sinVec_load_reg_938;
            else 
                grp_fu_375_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_375_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_375_p1_assign_proc : process(c_q1, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_phi_mux_d_phi_fu_283_p4, ap_block_pp1_stage0, ap_block_pp1_stage2)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                grp_fu_375_p1 <= c_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                grp_fu_375_p1 <= ap_phi_mux_d_phi_fu_283_p4;
            else 
                grp_fu_375_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_375_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_616_ap_start_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_616_ap_start <= ap_const_logic_1;
        else 
            grp_fu_616_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_616_p0 <= ap_const_lv32_100(11 - 1 downto 0);
    i0_1_fu_711_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_k_1_phi_fu_307_p4),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    i0_fu_450_p2 <= std_logic_vector(shift_left(unsigned(k_reg_175),to_integer(unsigned('0' & ap_const_lv9_1(9-1 downto 0)))));
    i1_fu_472_p2 <= std_logic_vector(shift_left(unsigned(j_reg_186),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    icmp_fu_528_p2 <= "1" when (signed(tmp_65_fu_518_p4) > signed(ap_const_lv31_0)) else "0";
    indvar_flatten_next_fu_598_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(indvar_flatten_reg_232));
    j_2_fu_560_p3 <= 
        j_6_fu_540_p2 when (or_cond_fu_534_p2(0) = '1') else 
        j_1_reg_209;
    j_3_cast2_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_mid2_reg_906),32));
    j_3_mid2_fu_659_p3 <= 
        ap_const_lv8_0 when (exitcond1_reg_870(0) = '1') else 
        j_3_reg_255;
    j_4_fu_576_p2 <= std_logic_vector(unsigned(j_1_reg_209) + unsigned(n3_reg_220));
    j_5_fu_782_p2 <= std_logic_vector(unsigned(j_3_mid2_reg_906) + unsigned(ap_const_lv8_1));
    j_6_fu_540_p2 <= std_logic_vector(unsigned(j_1_reg_209) - unsigned(n3_reg_220));
    k_1_cast1_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_k_1_phi_fu_307_p4),31));
    k_3_fu_434_p2 <= std_logic_vector(unsigned(k_reg_175) + unsigned(ap_const_lv9_1));
    k_4_fu_696_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_1_phi_fu_307_p4) + unsigned(ap_const_lv8_1));
    k_cast3_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_175),32));
    n_1_fu_568_p3 <= 
        n_3_fu_556_p1 when (or_cond_fu_534_p2(0) = '1') else 
        n3_reg_220;
    n_3_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_fu_546_p4),32));
    n_fu_586_p2 <= std_logic_vector(shift_left(unsigned(n_2_reg_243),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    n_mid2_fu_644_p3 <= 
        tmp_52_fu_638_p2 when (exitcond1_reg_870(0) = '1') else 
        n_reg_856;
    or_cond_fu_534_p2 <= (rev_fu_512_p2 and icmp_fu_528_p2);
    q_1_fu_500_p2 <= std_logic_vector(unsigned(q_reg_198) + unsigned(ap_const_lv4_1));
    rev_fu_512_p2 <= (slt_fu_506_p2 xor ap_const_lv1_1);
    sinVec_address0 <= wr_mid2_fu_666_p1(8 - 1 downto 0);

    sinVec_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            sinVec_ce0 <= ap_const_logic_1;
        else 
            sinVec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    slt_fu_506_p2 <= "1" when (signed(j_1_reg_209) < signed(n3_reg_220)) else "0";
    tmp_39_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i0_1_fu_711_p2),11));
    tmp_48_fu_582_p1 <= n_2_reg_243(31 - 1 downto 0);
    tmp_52_fu_638_p2 <= std_logic_vector(shift_left(unsigned(n_2_reg_243),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_53_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i0_fu_450_p2),64));
    tmp_54_fu_461_p2 <= (i0_fu_450_p2 or ap_const_lv9_1);
    tmp_55_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_461_p2),64));
        tmp_56_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i1_fu_472_p2),64));

    tmp_57_fu_483_p2 <= (i1_fu_472_p2 or ap_const_lv32_1);
        tmp_58_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_57_fu_483_p2),64));

    tmp_59_fu_622_p4 <= n_2_reg_243(31 downto 1);
    tmp_60_fu_632_p3 <= 
        tmp_48_reg_851 when (exitcond1_reg_870(0) = '1') else 
        tmp_59_fu_622_p4;
    tmp_61_fu_650_p1 <= wr_mid2_v_v_fu_610_p3(11 - 1 downto 0);
    tmp_62_fu_681_p1 <= cp_rec_mid2_fu_671_p3(11 - 1 downto 0);
    tmp_64_fu_685_p2 <= "1" when (signed(j_3_cast2_fu_678_p1) < signed(nb_mid2_reg_922)) else "0";
    tmp_65_fu_518_p4 <= n3_reg_220(31 downto 1);
    tmp_66_fu_546_p4 <= n3_reg_220(31 downto 1);
    tmp_68_fu_706_p2 <= "1" when (signed(k_1_cast1_fu_702_p1) < signed(tmp_60_reg_886)) else "0";
    tmp_69_fu_731_p2 <= (i0_1_fu_711_p2 or ap_const_lv8_1);
    tmp_75_cast_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_731_p2),11));
    tmp_76_cast_fu_751_p2 <= std_logic_vector(unsigned(tmp_61_reg_896) + unsigned(tmp_39_fu_717_p1));
    tmp_78_cast_fu_766_p2 <= (tmp_76_cast_fu_751_p2 or ap_const_lv11_1);
    tmp_fu_444_p2 <= "1" when (signed(k_cast3_fu_440_p1) < signed(j_reg_186)) else "0";
        wr_mid2_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wr_mid2_v_reg_901),64));

    wr_mid2_v_fu_654_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(wr_mid2_v_v_reg_879));
    wr_mid2_v_v_fu_610_p3 <= 
        n_reg_856 when (exitcond1_reg_870(0) = '1') else 
        n_2_reg_243;
end behav;
