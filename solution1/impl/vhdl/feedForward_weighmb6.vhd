-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity feedForward_weighmb6_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 78
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of feedForward_weighmb6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001100000000000101010000", 
    1 => "10111100101001000011110001010101", 
    2 => "10111101110111010010110001111100", 
    3 => "00111110001010101000100001101010", 
    4 => "10111101101111010100000011101110", 
    5 => "10111011100111001110011011000001", 
    6 => "10111111001101101100010111110100", 
    7 => "10111111011101101101000001011111", 
    8 => "00111111100111111001000011101011", 
    9 => "10111101100110111101011111101000", 
    10 => "10111101101011101001000001101100", 
    11 => "10111110011001101111010010111111", 
    12 => "10111110100010010011011011100111", 
    13 => "00111101110000011110000111111010", 
    14 => "10111110101000101000011110100000", 
    15 => "10111111001100101101100110111110", 
    16 => "00111111100010110111001100011001", 
    17 => "10111111001110101001011100111001", 
    18 => "00111110000000111011100010100010", 
    19 => "00111110000001000111001011000001", 
    20 => "00111110000000000101011000111111", 
    21 => "00111101100001000110011110111110", 
    22 => "00111110001100111000111011110011", 
    23 => "10111101100111011110101011110101", 
    24 => "00111111001000110101000110001011", 
    25 => "00111110110001100110001011111110", 
    26 => "10111111011100100011011100100110", 
    27 => "00111101111101010001000011010100", 
    28 => "00111110001111000011010110001011", 
    29 => "10111101101011000011101110100000", 
    30 => "10111111101100100110010000011011", 
    31 => "00111111001101110111101010000001", 
    32 => "00111111010011000101101010100011", 
    33 => "00111101000100010001001001011100", 
    34 => "10111001111010011000111011000111", 
    35 => "10111101100000110010000001101110", 
    36 => "10110101100111001001101010011001", 
    37 => "10111101101101101100111101011101", 
    38 => "10111101101101110111100101110001", 
    39 => "10111101000100111110010010011110", 
    40 => "10111100111011111000110011101011", 
    41 => "10111110011110110110111011010110", 
    42 => "00111111000101100100101111101100", 
    43 => "10111111011010100011000111000110", 
    44 => "00111110101110111011111001100110", 
    45 => "00111110000000110001001001101111", 
    46 => "00111101011101011100001010001111", 
    47 => "00111110010000001000001100010010", 
    48 => "10111101100000110011100010011010", 
    49 => "00111110000011110011000011101000", 
    50 => "00111011100001100101011010000110", 
    51 => "00111111000010011011100001010110", 
    52 => "00111110101010001000111100000000", 
    53 => "10111111101001010111110000011100", 
    54 => "10111101100010110111111000100110", 
    55 => "10111110010111100111010101111001", 
    56 => "10111101100101101001100101000010", 
    57 => "10111100100000101111111101011001", 
    58 => "00111101111111011100100010111000", 
    59 => "10111101000000110011110110000111", 
    60 => "00111111001010100001000111101101", 
    61 => "10111111101100100000100111111111", 
    62 => "00111111000001000001100111110100", 
    63 => "10111110010111010100000110110111", 
    64 => "00111101010011111011011100101101", 
    65 => "10111100000110111010010010100001", 
    66 => "10111111001111110110010000010111", 
    67 => "00111110101100110001101101111010", 
    68 => "00111110101000011000110101101001", 
    69 => "00111101110001001001101110100110", 
    70 => "10111101001101000011100101011000", 
    71 => "10111101010101001111110111110100", 
    72 => "00111111010100010100100010101010", 
    73 => "10111110111111010110111111011011", 
    74 => "10111110100001001101111101101010", 
    75 => "00111110100110111011001111001000", 
    76 => "00111100110011101100100010000101", 
    77 => "00111100010111011101101000111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity feedForward_weighmb6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 78;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of feedForward_weighmb6 is
    component feedForward_weighmb6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    feedForward_weighmb6_rom_U :  component feedForward_weighmb6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


