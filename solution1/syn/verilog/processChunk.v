// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module processChunk (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sp,
        ret_address0,
        ret_ce0,
        ret_we0,
        ret_d0,
        ret_offset,
        inputSound_address0,
        inputSound_ce0,
        inputSound_q0
);

parameter    ap_ST_fsm_state1 = 153'd1;
parameter    ap_ST_fsm_state2 = 153'd2;
parameter    ap_ST_fsm_state3 = 153'd4;
parameter    ap_ST_fsm_state4 = 153'd8;
parameter    ap_ST_fsm_state5 = 153'd16;
parameter    ap_ST_fsm_state6 = 153'd32;
parameter    ap_ST_fsm_state7 = 153'd64;
parameter    ap_ST_fsm_state8 = 153'd128;
parameter    ap_ST_fsm_state9 = 153'd256;
parameter    ap_ST_fsm_state10 = 153'd512;
parameter    ap_ST_fsm_state11 = 153'd1024;
parameter    ap_ST_fsm_state12 = 153'd2048;
parameter    ap_ST_fsm_state13 = 153'd4096;
parameter    ap_ST_fsm_state14 = 153'd8192;
parameter    ap_ST_fsm_state15 = 153'd16384;
parameter    ap_ST_fsm_state16 = 153'd32768;
parameter    ap_ST_fsm_state17 = 153'd65536;
parameter    ap_ST_fsm_state18 = 153'd131072;
parameter    ap_ST_fsm_state19 = 153'd262144;
parameter    ap_ST_fsm_state20 = 153'd524288;
parameter    ap_ST_fsm_state21 = 153'd1048576;
parameter    ap_ST_fsm_state22 = 153'd2097152;
parameter    ap_ST_fsm_state23 = 153'd4194304;
parameter    ap_ST_fsm_state24 = 153'd8388608;
parameter    ap_ST_fsm_state25 = 153'd16777216;
parameter    ap_ST_fsm_state26 = 153'd33554432;
parameter    ap_ST_fsm_state27 = 153'd67108864;
parameter    ap_ST_fsm_state28 = 153'd134217728;
parameter    ap_ST_fsm_state29 = 153'd268435456;
parameter    ap_ST_fsm_state30 = 153'd536870912;
parameter    ap_ST_fsm_state31 = 153'd1073741824;
parameter    ap_ST_fsm_state32 = 153'd2147483648;
parameter    ap_ST_fsm_state33 = 153'd4294967296;
parameter    ap_ST_fsm_state34 = 153'd8589934592;
parameter    ap_ST_fsm_state35 = 153'd17179869184;
parameter    ap_ST_fsm_state36 = 153'd34359738368;
parameter    ap_ST_fsm_state37 = 153'd68719476736;
parameter    ap_ST_fsm_state38 = 153'd137438953472;
parameter    ap_ST_fsm_state39 = 153'd274877906944;
parameter    ap_ST_fsm_state40 = 153'd549755813888;
parameter    ap_ST_fsm_state41 = 153'd1099511627776;
parameter    ap_ST_fsm_state42 = 153'd2199023255552;
parameter    ap_ST_fsm_state43 = 153'd4398046511104;
parameter    ap_ST_fsm_state44 = 153'd8796093022208;
parameter    ap_ST_fsm_state45 = 153'd17592186044416;
parameter    ap_ST_fsm_state46 = 153'd35184372088832;
parameter    ap_ST_fsm_state47 = 153'd70368744177664;
parameter    ap_ST_fsm_state48 = 153'd140737488355328;
parameter    ap_ST_fsm_state49 = 153'd281474976710656;
parameter    ap_ST_fsm_state50 = 153'd562949953421312;
parameter    ap_ST_fsm_state51 = 153'd1125899906842624;
parameter    ap_ST_fsm_state52 = 153'd2251799813685248;
parameter    ap_ST_fsm_state53 = 153'd4503599627370496;
parameter    ap_ST_fsm_state54 = 153'd9007199254740992;
parameter    ap_ST_fsm_state55 = 153'd18014398509481984;
parameter    ap_ST_fsm_state56 = 153'd36028797018963968;
parameter    ap_ST_fsm_state57 = 153'd72057594037927936;
parameter    ap_ST_fsm_state58 = 153'd144115188075855872;
parameter    ap_ST_fsm_state59 = 153'd288230376151711744;
parameter    ap_ST_fsm_state60 = 153'd576460752303423488;
parameter    ap_ST_fsm_state61 = 153'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 153'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 153'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 153'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 153'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 153'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 153'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 153'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 153'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 153'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 153'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 153'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 153'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 153'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 153'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 153'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 153'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 153'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 153'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 153'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 153'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 153'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 153'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 153'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 153'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 153'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 153'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 153'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 153'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 153'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 153'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 153'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 153'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 153'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 153'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 153'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 153'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 153'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 153'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 153'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 153'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 153'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 153'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 153'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 153'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 153'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 153'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 153'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 153'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 153'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 153'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 153'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 153'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 153'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 153'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 153'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 153'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 153'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 153'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 153'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 153'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 153'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 153'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 153'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 153'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 153'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 153'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 153'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 153'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 153'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 153'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 153'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 153'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 153'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 153'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 153'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 153'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 153'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 153'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 153'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 153'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 153'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 153'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 153'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 153'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 153'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 153'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 153'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 153'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 153'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 153'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 153'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 153'd5708990770823839524233143877797980545530986496;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [13:0] sp;
output  [9:0] ret_address0;
output   ret_ce0;
output   ret_we0;
output  [31:0] ret_d0;
input  [6:0] ret_offset;
output  [12:0] inputSound_address0;
output   inputSound_ce0;
input  [31:0] inputSound_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ret_ce0;
reg ret_we0;
reg inputSound_ce0;

(* fsm_encoding = "none" *) reg   [152:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] c_address0;
reg    c_ce0;
reg    c_we0;
reg   [31:0] c_d0;
wire   [31:0] c_q0;
reg   [8:0] c_address1;
reg    c_ce1;
reg    c_we1;
reg   [31:0] c_d1;
wire   [31:0] c_q1;
reg   [4:0] e_address0;
reg    e_ce0;
reg    e_we0;
reg   [31:0] e_d0;
wire   [31:0] e_q0;
reg   [7:0] spec_address0;
reg    spec_ce0;
reg    spec_we0;
wire   [31:0] spec_q0;
reg   [4:0] mell_address0;
reg    mell_ce0;
wire   [7:0] mell_q0;
wire   [9:0] dctMatrix_address0;
reg    dctMatrix_ce0;
wire   [31:0] dctMatrix_q0;
wire   [31:0] grp_fu_435_p2;
reg   [31:0] reg_478;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state115;
wire    ap_CS_fsm_state124;
wire    ap_CS_fsm_state129;
wire   [31:0] grp_fu_428_p2;
reg   [31:0] reg_487;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state138;
reg   [31:0] reg_495;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state44;
reg   [31:0] reg_500;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state119;
wire   [31:0] grp_fu_472_p2;
reg   [31:0] reg_507;
wire    ap_CS_fsm_state41;
wire   [0:0] tmp_22_fu_683_p2;
wire    ap_CS_fsm_state54;
reg   [31:0] reg_511;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state93;
wire   [10:0] tmp_41_fu_537_p2;
reg   [10:0] tmp_41_reg_878;
wire   [12:0] tmp_42_fu_543_p1;
reg   [12:0] tmp_42_reg_883;
wire   [8:0] i_4_fu_557_p2;
reg   [8:0] i_4_reg_891;
wire    ap_CS_fsm_state2;
wire   [12:0] tmp_fu_563_p2;
reg   [12:0] tmp_reg_896;
wire   [0:0] exitcond3_fu_551_p2;
wire    ap_CS_fsm_state3;
reg   [31:0] inputSound_load_reg_906;
wire    ap_CS_fsm_state4;
wire   [8:0] i_5_fu_611_p2;
reg   [8:0] i_5_reg_917;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond2_fu_605_p2;
reg   [31:0] c_load_reg_932;
wire    ap_CS_fsm_state8;
reg   [31:0] c_load_1_reg_938;
wire   [31:0] grp_fu_439_p2;
reg   [31:0] tmp_12_reg_944;
wire   [9:0] i_2_cast_fu_644_p1;
reg   [9:0] i_2_cast_reg_949;
wire    ap_CS_fsm_state29;
wire   [8:0] i_7_fu_654_p2;
reg   [8:0] i_7_reg_958;
wire  signed [63:0] tmp_16_fu_660_p1;
reg  signed [63:0] tmp_16_reg_963;
wire   [0:0] exitcond1_fu_648_p2;
wire   [8:0] mell_load_cast_cast_fu_669_p1;
reg   [8:0] mell_load_cast_cast_reg_973;
wire    ap_CS_fsm_state30;
wire   [0:0] tmp_17_fu_673_p2;
reg   [0:0] tmp_17_reg_978;
reg   [0:0] tmp_22_reg_987;
wire    ap_CS_fsm_state42;
wire   [0:0] tmp_25_fu_697_p2;
reg   [0:0] tmp_25_reg_996;
wire    ap_CS_fsm_state43;
reg   [4:0] e_addr_2_reg_1005;
wire    ap_CS_fsm_state55;
wire   [0:0] tmp_29_fu_717_p2;
reg   [0:0] tmp_29_reg_1015;
wire    ap_CS_fsm_state56;
wire   [31:0] p_mellIdx_fu_722_p3;
wire    ap_CS_fsm_state57;
wire   [4:0] i_6_fu_735_p2;
reg   [4:0] i_6_reg_1028;
wire    ap_CS_fsm_state58;
reg   [4:0] e_addr_1_reg_1033;
wire   [0:0] exitcond_fu_729_p2;
wire   [31:0] x_assign_to_int_fu_746_p1;
reg   [31:0] x_assign_to_int_reg_1038;
wire    ap_CS_fsm_state62;
wire   [22:0] tmp_47_fu_760_p1;
reg   [22:0] tmp_47_reg_1043;
wire   [0:0] notlhs_fu_764_p2;
reg   [0:0] notlhs_reg_1048;
wire   [0:0] notrhs_fu_770_p2;
reg   [0:0] notrhs_reg_1053;
wire   [0:0] grp_fu_462_p2;
reg   [0:0] tmp_37_reg_1058;
wire   [0:0] tmp_38_fu_780_p2;
reg   [0:0] tmp_38_reg_1063;
wire    ap_CS_fsm_state63;
wire   [31:0] tmp_54_i_i_fu_796_p1;
reg   [31:0] tmp_54_i_i_reg_1067;
wire   [31:0] grp_fu_452_p1;
reg   [31:0] y_reg_1073;
wire    ap_CS_fsm_state70;
wire   [31:0] grp_fu_447_p2;
reg   [31:0] tmp_58_i_i_reg_1078;
wire    ap_CS_fsm_state101;
wire   [8:0] next_mul_fu_801_p2;
reg   [8:0] next_mul_reg_1083;
wire    ap_CS_fsm_state117;
wire   [3:0] k_fu_813_p2;
reg   [3:0] k_reg_1091;
wire   [31:0] s_fu_825_p3;
reg   [31:0] s_reg_1096;
wire   [0:0] exitcond1_i_fu_807_p2;
reg   [9:0] ret_addr_reg_1101;
wire   [4:0] n_fu_853_p2;
reg   [4:0] n_reg_1109;
wire    ap_CS_fsm_state118;
wire   [8:0] tmp_46_fu_868_p2;
reg   [8:0] tmp_46_reg_1114;
wire   [0:0] exitcond_i_fu_847_p2;
wire    ap_CS_fsm_state123;
reg   [31:0] dctMatrix_load_reg_1129;
wire   [63:0] grp_fu_458_p1;
reg   [63:0] tmp_60_i_reg_1134;
wire    ap_CS_fsm_state139;
wire   [63:0] grp_fu_467_p2;
reg   [63:0] tmp_61_i_reg_1139;
wire    ap_CS_fsm_state149;
wire   [31:0] grp_fu_455_p1;
reg   [31:0] tmp_62_i_reg_1144;
wire    ap_CS_fsm_state152;
wire    grp_FFT_fu_418_ap_start;
wire    grp_FFT_fu_418_ap_done;
wire    grp_FFT_fu_418_ap_idle;
wire    grp_FFT_fu_418_ap_ready;
wire   [8:0] grp_FFT_fu_418_c_address0;
wire    grp_FFT_fu_418_c_ce0;
wire    grp_FFT_fu_418_c_we0;
wire   [31:0] grp_FFT_fu_418_c_d0;
wire   [8:0] grp_FFT_fu_418_c_address1;
wire    grp_FFT_fu_418_c_ce1;
wire    grp_FFT_fu_418_c_we1;
wire   [31:0] grp_FFT_fu_418_c_d1;
reg   [8:0] i_reg_301;
wire    ap_CS_fsm_state5;
reg   [8:0] i_1_reg_313;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state28;
reg   [8:0] i_2_reg_325;
reg  signed [31:0] mellIdx_reg_337;
reg   [4:0] i_3_reg_349;
wire    ap_CS_fsm_state116;
reg   [31:0] ap_phi_mux_storemerge_phi_fu_364_p4;
reg   [31:0] storemerge_reg_360;
reg   [3:0] k_i_reg_372;
wire    ap_CS_fsm_state153;
reg   [8:0] phi_mul_reg_383;
reg   [31:0] sum_i_reg_395;
reg   [4:0] n_i_reg_407;
reg    grp_FFT_fu_418_ap_start_reg;
wire   [63:0] tmp_s_fu_568_p1;
wire   [63:0] tmp_1_fu_578_p1;
wire   [63:0] tmp_3_fu_589_p1;
wire   [63:0] tmp_5_fu_600_p1;
wire   [0:0] tmp_4_fu_594_p2;
wire   [63:0] tmp_7_fu_623_p1;
wire   [63:0] tmp_11_fu_634_p1;
wire   [63:0] tmp_15_fu_639_p1;
wire   [63:0] tmp_20_fu_678_p1;
wire  signed [63:0] tmp_24_fu_688_p1;
wire   [63:0] tmp_26_fu_703_p1;
wire  signed [63:0] tmp_28_fu_708_p1;
wire   [63:0] tmp_18_fu_741_p1;
wire  signed [63:0] tmp_45_cast_fu_842_p1;
wire   [63:0] tmp_63_i_fu_859_p1;
wire   [63:0] tmp_46_cast_fu_874_p1;
reg   [31:0] grp_fu_428_p0;
reg   [31:0] grp_fu_428_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state130;
reg   [31:0] grp_fu_435_p0;
reg   [31:0] grp_fu_435_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state125;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state150;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state140;
wire   [7:0] tmp_40_fu_525_p3;
wire   [10:0] tmp_39_fu_517_p3;
wire   [10:0] p_shl1_cast_fu_533_p1;
wire   [12:0] i_cast7_fu_547_p1;
wire   [8:0] tmp_43_fu_572_p2;
wire   [8:0] tmp_2_fu_583_p2;
wire   [8:0] tmp_44_fu_617_p2;
wire   [8:0] tmp_10_fu_628_p2;
wire   [9:0] mell_load_cast_fu_665_p1;
wire   [8:0] mell_load_1_cast_cas_fu_693_p1;
wire  signed [31:0] tmp_28_fu_708_p0;
wire   [9:0] mell_load_2_cast_fu_713_p1;
wire  signed [31:0] p_mellIdx_fu_722_p1;
wire   [7:0] tmp_34_fu_750_p4;
wire   [0:0] tmp_36_fu_776_p2;
wire   [29:0] mx_i_i_fu_785_p3;
wire   [31:0] mx_i_i_cast_fu_792_p1;
wire   [0:0] tmp_i_15_fu_819_p2;
wire   [10:0] tmp_i1_cast_fu_833_p1;
wire   [10:0] tmp_45_fu_837_p2;
wire   [8:0] tmp_63_i_cast_fu_864_p1;
reg   [1:0] grp_fu_428_opcode;
reg   [152:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 153'd1;
#0 grp_FFT_fu_418_ap_start_reg = 1'b0;
end

processChunk_c #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_address0),
    .ce0(c_ce0),
    .we0(c_we0),
    .d0(c_d0),
    .q0(c_q0),
    .address1(c_address1),
    .ce1(c_ce1),
    .we1(c_we1),
    .d1(c_d1),
    .q1(c_q1)
);

processChunk_e #(
    .DataWidth( 32 ),
    .AddressRange( 26 ),
    .AddressWidth( 5 ))
e_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_address0),
    .ce0(e_ce0),
    .we0(e_we0),
    .d0(e_d0),
    .q0(e_q0)
);

processChunk_spec #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
spec_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(spec_address0),
    .ce0(spec_ce0),
    .we0(spec_we0),
    .d0(reg_478),
    .q0(spec_q0)
);

processChunk_mell #(
    .DataWidth( 8 ),
    .AddressRange( 27 ),
    .AddressWidth( 5 ))
mell_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mell_address0),
    .ce0(mell_ce0),
    .q0(mell_q0)
);

processChunk_dctMeOg #(
    .DataWidth( 32 ),
    .AddressRange( 676 ),
    .AddressWidth( 10 ))
dctMatrix_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dctMatrix_address0),
    .ce0(dctMatrix_ce0),
    .q0(dctMatrix_q0)
);

FFT grp_FFT_fu_418(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_FFT_fu_418_ap_start),
    .ap_done(grp_FFT_fu_418_ap_done),
    .ap_idle(grp_FFT_fu_418_ap_idle),
    .ap_ready(grp_FFT_fu_418_ap_ready),
    .c_address0(grp_FFT_fu_418_c_address0),
    .c_ce0(grp_FFT_fu_418_c_ce0),
    .c_we0(grp_FFT_fu_418_c_we0),
    .c_d0(grp_FFT_fu_418_c_d0),
    .c_q0(c_q0),
    .c_address1(grp_FFT_fu_418_c_address1),
    .c_ce1(grp_FFT_fu_418_c_ce1),
    .c_we1(grp_FFT_fu_418_c_we1),
    .c_d1(grp_FFT_fu_418_c_d1),
    .c_q1(c_q1)
);

voicerec_faddfsubbkb #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
voicerec_faddfsubbkb_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_428_p0),
    .din1(grp_fu_428_p1),
    .opcode(grp_fu_428_opcode),
    .ce(1'b1),
    .dout(grp_fu_428_p2)
);

voicerec_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
voicerec_fmul_32ncud_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_435_p0),
    .din1(grp_fu_435_p1),
    .ce(1'b1),
    .dout(grp_fu_435_p2)
);

voicerec_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
voicerec_fmul_32ncud_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(c_load_1_reg_938),
    .din1(c_load_1_reg_938),
    .ce(1'b1),
    .dout(grp_fu_439_p2)
);

voicerec_fdiv_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
voicerec_fdiv_32nfYi_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1071442339),
    .din1(reg_487),
    .ce(1'b1),
    .dout(grp_fu_447_p2)
);

voicerec_uitofp_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
voicerec_uitofp_3g8j_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_assign_to_int_reg_1038),
    .ce(1'b1),
    .dout(grp_fu_452_p1)
);

voicerec_fptrunc_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
voicerec_fptrunc_hbi_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_61_i_reg_1139),
    .ce(1'b1),
    .dout(grp_fu_455_p1)
);

voicerec_fpext_32ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
voicerec_fpext_32ibs_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_i_reg_395),
    .ce(1'b1),
    .dout(grp_fu_458_p1)
);

voicerec_fcmp_32njbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
voicerec_fcmp_32njbC_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_500),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_462_p2)
);

voicerec_dmul_64nkbM #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
voicerec_dmul_64nkbM_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_60_i_reg_1134),
    .din1(64'd4598667915111950494),
    .ce(1'b1),
    .dout(grp_fu_467_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_FFT_fu_418_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond3_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_FFT_fu_418_ap_start_reg <= 1'b1;
        end else if ((grp_FFT_fu_418_ap_ready == 1'b1)) begin
            grp_FFT_fu_418_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i_1_reg_313 <= i_5_reg_917;
    end else if (((grp_FFT_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_1_reg_313 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_605_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_2_reg_325 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        i_2_reg_325 <= i_7_reg_958;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_648_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        i_3_reg_349 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state116)) begin
        i_3_reg_349 <= i_6_reg_1028;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_301 <= i_4_reg_891;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_301 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        k_i_reg_372 <= k_reg_1091;
    end else if (((exitcond_fu_729_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
        k_i_reg_372 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_605_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        mellIdx_reg_337 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        mellIdx_reg_337 <= p_mellIdx_fu_722_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state138)) begin
        n_i_reg_407 <= n_reg_1109;
    end else if (((exitcond1_i_fu_807_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state117))) begin
        n_i_reg_407 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        phi_mul_reg_383 <= next_mul_reg_1083;
    end else if (((exitcond_fu_729_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
        phi_mul_reg_383 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_38_fu_780_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
        storemerge_reg_360 <= 32'd0;
    end else if (((tmp_38_reg_1063 == 1'd0) & (1'b1 == ap_CS_fsm_state116))) begin
        storemerge_reg_360 <= reg_478;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state138)) begin
        sum_i_reg_395 <= grp_fu_428_p2;
    end else if (((exitcond1_i_fu_807_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state117))) begin
        sum_i_reg_395 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c_load_1_reg_938 <= c_q1;
        c_load_reg_932 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state124)) begin
        dctMatrix_load_reg_1129 <= dctMatrix_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_729_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state58))) begin
        e_addr_1_reg_1033 <= tmp_18_fu_741_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_25_fu_697_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        e_addr_2_reg_1005 <= tmp_16_reg_963;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        i_2_cast_reg_949[8 : 0] <= i_2_cast_fu_644_p1[8 : 0];
        i_7_reg_958 <= i_7_fu_654_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_4_reg_891 <= i_4_fu_557_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_5_reg_917 <= i_5_fu_611_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        i_6_reg_1028 <= i_6_fu_735_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        inputSound_load_reg_906 <= inputSound_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        k_reg_1091 <= k_fu_813_p2;
        next_mul_reg_1083 <= next_mul_fu_801_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        mell_load_cast_cast_reg_973[7 : 0] <= mell_load_cast_cast_fu_669_p1[7 : 0];
        tmp_17_reg_978 <= tmp_17_fu_673_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        n_reg_1109 <= n_fu_853_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        notlhs_reg_1048 <= notlhs_fu_764_p2;
        notrhs_reg_1053 <= notrhs_fu_770_p2;
        tmp_37_reg_1058 <= grp_fu_462_p2;
        tmp_47_reg_1043 <= tmp_47_fu_760_p1;
        x_assign_to_int_reg_1038 <= x_assign_to_int_fu_746_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_478 <= grp_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_487 <= grp_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_495 <= spec_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_500 <= e_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) | ((tmp_22_fu_683_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41)))) begin
        reg_507 <= grp_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state84))) begin
        reg_511 <= grp_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_fu_807_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state117))) begin
        ret_addr_reg_1101 <= tmp_45_cast_fu_842_p1;
        s_reg_1096[1 : 0] <= s_fu_825_p3[1 : 0];
s_reg_1096[7 : 4] <= s_fu_825_p3[7 : 4];
s_reg_1096[10] <= s_fu_825_p3[10];
s_reg_1096[16] <= s_fu_825_p3[16];
s_reg_1096[18] <= s_fu_825_p3[18];
s_reg_1096[21 : 20] <= s_fu_825_p3[21 : 20];
s_reg_1096[23] <= s_fu_825_p3[23];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_12_reg_944 <= grp_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_648_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
        tmp_16_reg_963 <= tmp_16_fu_660_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        tmp_22_reg_987 <= tmp_22_fu_683_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        tmp_25_reg_996 <= tmp_25_fu_697_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        tmp_29_reg_1015 <= tmp_29_fu_717_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        tmp_38_reg_1063 <= tmp_38_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_41_reg_878[10 : 1] <= tmp_41_fu_537_p2[10 : 1];
        tmp_42_reg_883 <= tmp_42_fu_543_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_847_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state118))) begin
        tmp_46_reg_1114 <= tmp_46_fu_868_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_38_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state63))) begin
        tmp_54_i_i_reg_1067[22 : 0] <= tmp_54_i_i_fu_796_p1[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_58_i_i_reg_1078 <= grp_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state139)) begin
        tmp_60_i_reg_1134 <= grp_fu_458_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        tmp_61_i_reg_1139 <= grp_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state152)) begin
        tmp_62_i_reg_1144 <= grp_fu_455_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_551_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_896 <= tmp_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        y_reg_1073 <= grp_fu_452_p1;
    end
end

always @ (*) begin
    if ((((exitcond1_i_fu_807_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state117)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_38_reg_1063 == 1'd0) & (1'b1 == ap_CS_fsm_state116))) begin
        ap_phi_mux_storemerge_phi_fu_364_p4 = reg_478;
    end else begin
        ap_phi_mux_storemerge_phi_fu_364_p4 = storemerge_reg_360;
    end
end

always @ (*) begin
    if (((exitcond1_i_fu_807_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state117))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_address0 = tmp_7_fu_623_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        c_address0 = tmp_1_fu_578_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c_address0 = grp_FFT_fu_418_c_address0;
    end else begin
        c_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_address1 = tmp_11_fu_634_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        c_address1 = tmp_3_fu_589_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c_address1 = grp_FFT_fu_418_c_address1;
    end else begin
        c_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        c_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c_ce0 = grp_FFT_fu_418_c_ce0;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        c_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c_ce1 = grp_FFT_fu_418_c_ce1;
    end else begin
        c_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_d0 = inputSound_load_reg_906;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c_d0 = grp_FFT_fu_418_c_d0;
    end else begin
        c_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_d1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c_d1 = grp_FFT_fu_418_c_d1;
    end else begin
        c_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c_we0 = grp_FFT_fu_418_c_we0;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_we1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c_we1 = grp_FFT_fu_418_c_we1;
    end else begin
        c_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        dctMatrix_ce0 = 1'b1;
    end else begin
        dctMatrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        e_address0 = tmp_63_i_fu_859_p1;
    end else if ((1'b1 == ap_CS_fsm_state116)) begin
        e_address0 = e_addr_1_reg_1033;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        e_address0 = tmp_18_fu_741_p1;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        e_address0 = e_addr_2_reg_1005;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        e_address0 = tmp_16_reg_963;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state41))) begin
        e_address0 = 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        e_address0 = tmp_5_fu_600_p1;
    end else begin
        e_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state41))) begin
        e_ce0 = 1'b1;
    end else begin
        e_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        e_d0 = ap_phi_mux_storemerge_phi_fu_364_p4;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        e_d0 = reg_511;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        e_d0 = reg_487;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        e_d0 = 32'd0;
    end else begin
        e_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state116) | ((tmp_4_fu_594_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((tmp_25_reg_996 == 1'd0) & (tmp_22_reg_987 == 1'd1) & (1'b1 == ap_CS_fsm_state54)) | ((tmp_17_reg_978 == 1'd1) & (1'b1 == ap_CS_fsm_state41)))) begin
        e_we0 = 1'b1;
    end else begin
        e_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state85))) begin
        grp_fu_428_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state14) | ((tmp_38_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state63)))) begin
        grp_fu_428_opcode = 2'd0;
    end else begin
        grp_fu_428_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        grp_fu_428_p0 = sum_i_reg_395;
    end else if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state85))) begin
        grp_fu_428_p0 = reg_511;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_428_p0 = tmp_54_i_i_fu_796_p1;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state32))) begin
        grp_fu_428_p0 = reg_500;
    end else if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_428_p0 = reg_478;
    end else begin
        grp_fu_428_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        grp_fu_428_p1 = tmp_58_i_i_reg_1078;
    end else if (((1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state85))) begin
        grp_fu_428_p1 = reg_478;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_428_p1 = 32'd3271062391;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_428_p1 = 32'd1052001529;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state32))) begin
        grp_fu_428_p1 = reg_495;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_428_p1 = tmp_12_reg_944;
    end else begin
        grp_fu_428_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        grp_fu_435_p0 = reg_478;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        grp_fu_435_p0 = s_reg_1096;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        grp_fu_435_p0 = tmp_54_i_i_reg_1067;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_fu_435_p0 = y_reg_1073;
    end else if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_435_p0 = reg_487;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_435_p0 = c_load_reg_932;
    end else begin
        grp_fu_435_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        grp_fu_435_p1 = dctMatrix_load_reg_1129;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        grp_fu_435_p1 = reg_500;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        grp_fu_435_p1 = 32'd1060205080;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        grp_fu_435_p1 = 32'd1069530997;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_fu_435_p1 = 32'd872415232;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_435_p1 = 32'd998244352;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_435_p1 = c_load_reg_932;
    end else begin
        grp_fu_435_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inputSound_ce0 = 1'b1;
    end else begin
        inputSound_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        mell_address0 = tmp_28_fu_708_p1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        mell_address0 = tmp_24_fu_688_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        mell_address0 = tmp_16_fu_660_p1;
    end else begin
        mell_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state29))) begin
        mell_ce0 = 1'b1;
    end else begin
        mell_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        ret_ce0 = 1'b1;
    end else begin
        ret_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        ret_we0 = 1'b1;
    end else begin
        ret_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        spec_address0 = tmp_26_fu_703_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        spec_address0 = tmp_20_fu_678_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        spec_address0 = tmp_15_fu_639_p1;
    end else begin
        spec_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state30))) begin
        spec_ce0 = 1'b1;
    end else begin
        spec_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        spec_we0 = 1'b1;
    end else begin
        spec_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_FFT_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond2_fu_605_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state29 : begin
            if (((exitcond1_fu_648_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((tmp_17_fu_673_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((tmp_22_fu_683_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((tmp_25_fu_697_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state58 : begin
            if (((exitcond_fu_729_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            if (((tmp_38_fu_780_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state117 : begin
            if (((exitcond1_i_fu_807_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state117))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end
        end
        ap_ST_fsm_state118 : begin
            if (((exitcond_i_fu_847_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state118))) begin
                ap_NS_fsm = ap_ST_fsm_state139;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state153 = ap_CS_fsm[32'd152];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign dctMatrix_address0 = tmp_46_cast_fu_874_p1;

assign exitcond1_fu_648_p2 = ((i_2_reg_325 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond1_i_fu_807_p2 = ((k_i_reg_372 == 4'd14) ? 1'b1 : 1'b0);

assign exitcond2_fu_605_p2 = ((i_1_reg_313 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond3_fu_551_p2 = ((i_reg_301 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond_fu_729_p2 = ((i_3_reg_349 == 5'd26) ? 1'b1 : 1'b0);

assign exitcond_i_fu_847_p2 = ((n_i_reg_407 == 5'd26) ? 1'b1 : 1'b0);

assign grp_FFT_fu_418_ap_start = grp_FFT_fu_418_ap_start_reg;

assign grp_fu_472_p2 = ($signed(mellIdx_reg_337) + $signed(32'd1));

assign i_2_cast_fu_644_p1 = i_2_reg_325;

assign i_4_fu_557_p2 = (i_reg_301 + 9'd1);

assign i_5_fu_611_p2 = (i_1_reg_313 + 9'd1);

assign i_6_fu_735_p2 = (i_3_reg_349 + 5'd1);

assign i_7_fu_654_p2 = (i_2_reg_325 + 9'd1);

assign i_cast7_fu_547_p1 = i_reg_301;

assign inputSound_address0 = tmp_s_fu_568_p1;

assign k_fu_813_p2 = (k_i_reg_372 + 4'd1);

assign mell_load_1_cast_cas_fu_693_p1 = mell_q0;

assign mell_load_2_cast_fu_713_p1 = mell_q0;

assign mell_load_cast_cast_fu_669_p1 = mell_q0;

assign mell_load_cast_fu_665_p1 = mell_q0;

assign mx_i_i_cast_fu_792_p1 = mx_i_i_fu_785_p3;

assign mx_i_i_fu_785_p3 = {{7'd126}, {tmp_47_reg_1043}};

assign n_fu_853_p2 = (n_i_reg_407 + 5'd1);

assign next_mul_fu_801_p2 = (phi_mul_reg_383 + 9'd26);

assign notlhs_fu_764_p2 = ((tmp_34_fu_750_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_770_p2 = ((tmp_47_fu_760_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_mellIdx_fu_722_p1 = reg_507;

assign p_mellIdx_fu_722_p3 = ((tmp_29_reg_1015[0:0] === 1'b1) ? p_mellIdx_fu_722_p1 : mellIdx_reg_337);

assign p_shl1_cast_fu_533_p1 = tmp_40_fu_525_p3;

assign ret_address0 = ret_addr_reg_1101;

assign ret_d0 = tmp_62_i_reg_1144;

assign s_fu_825_p3 = ((tmp_i_15_fu_819_p2[0:0] === 1'b1) ? 32'd1060439283 : 32'd1065353216);

assign tmp_10_fu_628_p2 = (tmp_44_fu_617_p2 | 9'd1);

assign tmp_11_fu_634_p1 = tmp_10_fu_628_p2;

assign tmp_15_fu_639_p1 = i_1_reg_313;

assign tmp_16_fu_660_p1 = mellIdx_reg_337;

assign tmp_17_fu_673_p2 = ((i_2_cast_reg_949 == mell_load_cast_fu_665_p1) ? 1'b1 : 1'b0);

assign tmp_18_fu_741_p1 = i_3_reg_349;

assign tmp_1_fu_578_p1 = tmp_43_fu_572_p2;

assign tmp_20_fu_678_p1 = i_2_reg_325;

assign tmp_22_fu_683_p2 = ((i_2_reg_325 > mell_load_cast_cast_reg_973) ? 1'b1 : 1'b0);

assign tmp_24_fu_688_p1 = $signed(reg_507);

assign tmp_25_fu_697_p2 = ((i_2_reg_325 > mell_load_1_cast_cas_fu_693_p1) ? 1'b1 : 1'b0);

assign tmp_26_fu_703_p1 = i_2_reg_325;

assign tmp_28_fu_708_p0 = reg_507;

assign tmp_28_fu_708_p1 = tmp_28_fu_708_p0;

assign tmp_29_fu_717_p2 = ((i_2_cast_reg_949 == mell_load_2_cast_fu_713_p1) ? 1'b1 : 1'b0);

assign tmp_2_fu_583_p2 = (tmp_43_fu_572_p2 | 9'd1);

assign tmp_34_fu_750_p4 = {{x_assign_to_int_fu_746_p1[30:23]}};

assign tmp_36_fu_776_p2 = (notrhs_reg_1053 | notlhs_reg_1048);

assign tmp_38_fu_780_p2 = (tmp_37_reg_1058 & tmp_36_fu_776_p2);

assign tmp_39_fu_517_p3 = {{ret_offset}, {4'd0}};

assign tmp_3_fu_589_p1 = tmp_2_fu_583_p2;

assign tmp_40_fu_525_p3 = {{ret_offset}, {1'd0}};

assign tmp_41_fu_537_p2 = (tmp_39_fu_517_p3 - p_shl1_cast_fu_533_p1);

assign tmp_42_fu_543_p1 = sp[12:0];

assign tmp_43_fu_572_p2 = i_reg_301 << 9'd1;

assign tmp_44_fu_617_p2 = i_1_reg_313 << 9'd1;

assign tmp_45_cast_fu_842_p1 = $signed(tmp_45_fu_837_p2);

assign tmp_45_fu_837_p2 = (tmp_41_reg_878 + tmp_i1_cast_fu_833_p1);

assign tmp_46_cast_fu_874_p1 = tmp_46_reg_1114;

assign tmp_46_fu_868_p2 = (phi_mul_reg_383 + tmp_63_i_cast_fu_864_p1);

assign tmp_47_fu_760_p1 = x_assign_to_int_fu_746_p1[22:0];

assign tmp_4_fu_594_p2 = ((i_reg_301 < 9'd26) ? 1'b1 : 1'b0);

assign tmp_54_i_i_fu_796_p1 = mx_i_i_cast_fu_792_p1;

assign tmp_5_fu_600_p1 = i_reg_301;

assign tmp_63_i_cast_fu_864_p1 = n_i_reg_407;

assign tmp_63_i_fu_859_p1 = n_i_reg_407;

assign tmp_7_fu_623_p1 = tmp_44_fu_617_p2;

assign tmp_fu_563_p2 = (i_cast7_fu_547_p1 + tmp_42_reg_883);

assign tmp_i1_cast_fu_833_p1 = k_i_reg_372;

assign tmp_i_15_fu_819_p2 = ((k_i_reg_372 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_568_p1 = tmp_reg_896;

assign x_assign_to_int_fu_746_p1 = reg_500;

always @ (posedge ap_clk) begin
    tmp_41_reg_878[0] <= 1'b0;
    i_2_cast_reg_949[9] <= 1'b0;
    mell_load_cast_cast_reg_973[8] <= 1'b0;
    tmp_54_i_i_reg_1067[31:23] <= 9'b001111110;
    s_reg_1096[3:2] <= 2'b00;
    s_reg_1096[9:8] <= 2'b00;
    s_reg_1096[15:11] <= 5'b00000;
    s_reg_1096[17:17] <= 1'b0;
    s_reg_1096[19:19] <= 1'b0;
    s_reg_1096[22:22] <= 1'b0;
    s_reg_1096[31:24] <= 8'b00111111;
end

endmodule //processChunk
