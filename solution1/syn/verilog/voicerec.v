// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="voicerec,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.658000,HLS_SYN_LAT=34949310,HLS_SYN_TPT=none,HLS_SYN_MEM=112,HLS_SYN_DSP=69,HLS_SYN_FF=27567,HLS_SYN_LUT=32639,HLS_VERSION=2018_2}" *)

module voicerec (
        ap_clk,
        ap_rst_n,
        m_axi_voice_rec_AWVALID,
        m_axi_voice_rec_AWREADY,
        m_axi_voice_rec_AWADDR,
        m_axi_voice_rec_AWID,
        m_axi_voice_rec_AWLEN,
        m_axi_voice_rec_AWSIZE,
        m_axi_voice_rec_AWBURST,
        m_axi_voice_rec_AWLOCK,
        m_axi_voice_rec_AWCACHE,
        m_axi_voice_rec_AWPROT,
        m_axi_voice_rec_AWQOS,
        m_axi_voice_rec_AWREGION,
        m_axi_voice_rec_AWUSER,
        m_axi_voice_rec_WVALID,
        m_axi_voice_rec_WREADY,
        m_axi_voice_rec_WDATA,
        m_axi_voice_rec_WSTRB,
        m_axi_voice_rec_WLAST,
        m_axi_voice_rec_WID,
        m_axi_voice_rec_WUSER,
        m_axi_voice_rec_ARVALID,
        m_axi_voice_rec_ARREADY,
        m_axi_voice_rec_ARADDR,
        m_axi_voice_rec_ARID,
        m_axi_voice_rec_ARLEN,
        m_axi_voice_rec_ARSIZE,
        m_axi_voice_rec_ARBURST,
        m_axi_voice_rec_ARLOCK,
        m_axi_voice_rec_ARCACHE,
        m_axi_voice_rec_ARPROT,
        m_axi_voice_rec_ARQOS,
        m_axi_voice_rec_ARREGION,
        m_axi_voice_rec_ARUSER,
        m_axi_voice_rec_RVALID,
        m_axi_voice_rec_RREADY,
        m_axi_voice_rec_RDATA,
        m_axi_voice_rec_RLAST,
        m_axi_voice_rec_RID,
        m_axi_voice_rec_RUSER,
        m_axi_voice_rec_RRESP,
        m_axi_voice_rec_BVALID,
        m_axi_voice_rec_BREADY,
        m_axi_voice_rec_BRESP,
        m_axi_voice_rec_BID,
        m_axi_voice_rec_BUSER,
        guess,
        s_axi_voice_rec_AWVALID,
        s_axi_voice_rec_AWREADY,
        s_axi_voice_rec_AWADDR,
        s_axi_voice_rec_WVALID,
        s_axi_voice_rec_WREADY,
        s_axi_voice_rec_WDATA,
        s_axi_voice_rec_WSTRB,
        s_axi_voice_rec_ARVALID,
        s_axi_voice_rec_ARREADY,
        s_axi_voice_rec_ARADDR,
        s_axi_voice_rec_RVALID,
        s_axi_voice_rec_RREADY,
        s_axi_voice_rec_RDATA,
        s_axi_voice_rec_RRESP,
        s_axi_voice_rec_BVALID,
        s_axi_voice_rec_BREADY,
        s_axi_voice_rec_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 232'd1;
parameter    ap_ST_fsm_state2 = 232'd2;
parameter    ap_ST_fsm_state3 = 232'd4;
parameter    ap_ST_fsm_state4 = 232'd8;
parameter    ap_ST_fsm_state5 = 232'd16;
parameter    ap_ST_fsm_state6 = 232'd32;
parameter    ap_ST_fsm_state7 = 232'd64;
parameter    ap_ST_fsm_state8 = 232'd128;
parameter    ap_ST_fsm_pp0_stage0 = 232'd256;
parameter    ap_ST_fsm_state12 = 232'd512;
parameter    ap_ST_fsm_state13 = 232'd1024;
parameter    ap_ST_fsm_state14 = 232'd2048;
parameter    ap_ST_fsm_state15 = 232'd4096;
parameter    ap_ST_fsm_state16 = 232'd8192;
parameter    ap_ST_fsm_state17 = 232'd16384;
parameter    ap_ST_fsm_state18 = 232'd32768;
parameter    ap_ST_fsm_state19 = 232'd65536;
parameter    ap_ST_fsm_state20 = 232'd131072;
parameter    ap_ST_fsm_state21 = 232'd262144;
parameter    ap_ST_fsm_state22 = 232'd524288;
parameter    ap_ST_fsm_state23 = 232'd1048576;
parameter    ap_ST_fsm_state24 = 232'd2097152;
parameter    ap_ST_fsm_state25 = 232'd4194304;
parameter    ap_ST_fsm_state26 = 232'd8388608;
parameter    ap_ST_fsm_state27 = 232'd16777216;
parameter    ap_ST_fsm_state28 = 232'd33554432;
parameter    ap_ST_fsm_state29 = 232'd67108864;
parameter    ap_ST_fsm_state30 = 232'd134217728;
parameter    ap_ST_fsm_state31 = 232'd268435456;
parameter    ap_ST_fsm_state32 = 232'd536870912;
parameter    ap_ST_fsm_state33 = 232'd1073741824;
parameter    ap_ST_fsm_state34 = 232'd2147483648;
parameter    ap_ST_fsm_state35 = 232'd4294967296;
parameter    ap_ST_fsm_state36 = 232'd8589934592;
parameter    ap_ST_fsm_state37 = 232'd17179869184;
parameter    ap_ST_fsm_state38 = 232'd34359738368;
parameter    ap_ST_fsm_state39 = 232'd68719476736;
parameter    ap_ST_fsm_state40 = 232'd137438953472;
parameter    ap_ST_fsm_state41 = 232'd274877906944;
parameter    ap_ST_fsm_state42 = 232'd549755813888;
parameter    ap_ST_fsm_state43 = 232'd1099511627776;
parameter    ap_ST_fsm_state44 = 232'd2199023255552;
parameter    ap_ST_fsm_state45 = 232'd4398046511104;
parameter    ap_ST_fsm_state46 = 232'd8796093022208;
parameter    ap_ST_fsm_state47 = 232'd17592186044416;
parameter    ap_ST_fsm_state48 = 232'd35184372088832;
parameter    ap_ST_fsm_state49 = 232'd70368744177664;
parameter    ap_ST_fsm_state50 = 232'd140737488355328;
parameter    ap_ST_fsm_state51 = 232'd281474976710656;
parameter    ap_ST_fsm_state52 = 232'd562949953421312;
parameter    ap_ST_fsm_state53 = 232'd1125899906842624;
parameter    ap_ST_fsm_state54 = 232'd2251799813685248;
parameter    ap_ST_fsm_state55 = 232'd4503599627370496;
parameter    ap_ST_fsm_state56 = 232'd9007199254740992;
parameter    ap_ST_fsm_state57 = 232'd18014398509481984;
parameter    ap_ST_fsm_state58 = 232'd36028797018963968;
parameter    ap_ST_fsm_state59 = 232'd72057594037927936;
parameter    ap_ST_fsm_state60 = 232'd144115188075855872;
parameter    ap_ST_fsm_state61 = 232'd288230376151711744;
parameter    ap_ST_fsm_state62 = 232'd576460752303423488;
parameter    ap_ST_fsm_state63 = 232'd1152921504606846976;
parameter    ap_ST_fsm_state64 = 232'd2305843009213693952;
parameter    ap_ST_fsm_state65 = 232'd4611686018427387904;
parameter    ap_ST_fsm_state66 = 232'd9223372036854775808;
parameter    ap_ST_fsm_state67 = 232'd18446744073709551616;
parameter    ap_ST_fsm_state68 = 232'd36893488147419103232;
parameter    ap_ST_fsm_state69 = 232'd73786976294838206464;
parameter    ap_ST_fsm_state70 = 232'd147573952589676412928;
parameter    ap_ST_fsm_state71 = 232'd295147905179352825856;
parameter    ap_ST_fsm_state72 = 232'd590295810358705651712;
parameter    ap_ST_fsm_state73 = 232'd1180591620717411303424;
parameter    ap_ST_fsm_state74 = 232'd2361183241434822606848;
parameter    ap_ST_fsm_state75 = 232'd4722366482869645213696;
parameter    ap_ST_fsm_state76 = 232'd9444732965739290427392;
parameter    ap_ST_fsm_state77 = 232'd18889465931478580854784;
parameter    ap_ST_fsm_state78 = 232'd37778931862957161709568;
parameter    ap_ST_fsm_state79 = 232'd75557863725914323419136;
parameter    ap_ST_fsm_state80 = 232'd151115727451828646838272;
parameter    ap_ST_fsm_state81 = 232'd302231454903657293676544;
parameter    ap_ST_fsm_state82 = 232'd604462909807314587353088;
parameter    ap_ST_fsm_state83 = 232'd1208925819614629174706176;
parameter    ap_ST_fsm_state84 = 232'd2417851639229258349412352;
parameter    ap_ST_fsm_state85 = 232'd4835703278458516698824704;
parameter    ap_ST_fsm_state86 = 232'd9671406556917033397649408;
parameter    ap_ST_fsm_state87 = 232'd19342813113834066795298816;
parameter    ap_ST_fsm_state88 = 232'd38685626227668133590597632;
parameter    ap_ST_fsm_state89 = 232'd77371252455336267181195264;
parameter    ap_ST_fsm_state90 = 232'd154742504910672534362390528;
parameter    ap_ST_fsm_state91 = 232'd309485009821345068724781056;
parameter    ap_ST_fsm_state92 = 232'd618970019642690137449562112;
parameter    ap_ST_fsm_state93 = 232'd1237940039285380274899124224;
parameter    ap_ST_fsm_state94 = 232'd2475880078570760549798248448;
parameter    ap_ST_fsm_state95 = 232'd4951760157141521099596496896;
parameter    ap_ST_fsm_state96 = 232'd9903520314283042199192993792;
parameter    ap_ST_fsm_state97 = 232'd19807040628566084398385987584;
parameter    ap_ST_fsm_state98 = 232'd39614081257132168796771975168;
parameter    ap_ST_fsm_state99 = 232'd79228162514264337593543950336;
parameter    ap_ST_fsm_state100 = 232'd158456325028528675187087900672;
parameter    ap_ST_fsm_state101 = 232'd316912650057057350374175801344;
parameter    ap_ST_fsm_state102 = 232'd633825300114114700748351602688;
parameter    ap_ST_fsm_state103 = 232'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state104 = 232'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state105 = 232'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state106 = 232'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state107 = 232'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state108 = 232'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state109 = 232'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state110 = 232'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state111 = 232'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state112 = 232'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state113 = 232'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state114 = 232'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state115 = 232'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state116 = 232'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state117 = 232'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state118 = 232'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state119 = 232'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state120 = 232'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state121 = 232'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state122 = 232'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state123 = 232'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state124 = 232'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state125 = 232'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state126 = 232'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state127 = 232'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state128 = 232'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state129 = 232'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state130 = 232'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state131 = 232'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state132 = 232'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state133 = 232'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state134 = 232'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state135 = 232'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state136 = 232'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state137 = 232'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state138 = 232'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state139 = 232'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state140 = 232'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state141 = 232'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state142 = 232'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state143 = 232'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state144 = 232'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state145 = 232'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state146 = 232'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state147 = 232'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state148 = 232'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state149 = 232'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state150 = 232'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state151 = 232'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state152 = 232'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state153 = 232'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state154 = 232'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state155 = 232'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state156 = 232'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state157 = 232'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state158 = 232'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state159 = 232'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state160 = 232'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state161 = 232'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state162 = 232'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state163 = 232'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state164 = 232'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state165 = 232'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state166 = 232'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state167 = 232'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state168 = 232'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state169 = 232'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state170 = 232'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state171 = 232'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state172 = 232'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state173 = 232'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state174 = 232'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state175 = 232'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state176 = 232'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state177 = 232'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state178 = 232'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state179 = 232'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state180 = 232'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state181 = 232'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state182 = 232'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state183 = 232'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state184 = 232'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state185 = 232'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state186 = 232'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state187 = 232'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state188 = 232'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state189 = 232'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state190 = 232'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state191 = 232'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state192 = 232'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state193 = 232'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state194 = 232'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state195 = 232'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state196 = 232'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state197 = 232'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state198 = 232'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state199 = 232'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state200 = 232'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state201 = 232'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state202 = 232'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state203 = 232'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state204 = 232'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state205 = 232'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state206 = 232'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state207 = 232'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state208 = 232'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state209 = 232'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state210 = 232'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state211 = 232'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state212 = 232'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state213 = 232'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state214 = 232'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state215 = 232'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state216 = 232'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state217 = 232'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state218 = 232'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state219 = 232'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state220 = 232'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state221 = 232'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state222 = 232'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state223 = 232'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state224 = 232'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state225 = 232'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state226 = 232'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state227 = 232'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state228 = 232'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state229 = 232'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state230 = 232'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state231 = 232'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state232 = 232'd862718293348820473429344482784628181556388621521298319395315527974912;
parameter    ap_ST_fsm_state233 = 232'd1725436586697640946858688965569256363112777243042596638790631055949824;
parameter    ap_ST_fsm_state234 = 232'd3450873173395281893717377931138512726225554486085193277581262111899648;
parameter    C_S_AXI_VOICE_REC_DATA_WIDTH = 32;
parameter    C_S_AXI_VOICE_REC_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_VOICE_REC_ID_WIDTH = 1;
parameter    C_M_AXI_VOICE_REC_ADDR_WIDTH = 32;
parameter    C_M_AXI_VOICE_REC_DATA_WIDTH = 32;
parameter    C_M_AXI_VOICE_REC_AWUSER_WIDTH = 1;
parameter    C_M_AXI_VOICE_REC_ARUSER_WIDTH = 1;
parameter    C_M_AXI_VOICE_REC_WUSER_WIDTH = 1;
parameter    C_M_AXI_VOICE_REC_RUSER_WIDTH = 1;
parameter    C_M_AXI_VOICE_REC_BUSER_WIDTH = 1;
parameter    C_M_AXI_VOICE_REC_USER_VALUE = 0;
parameter    C_M_AXI_VOICE_REC_PROT_VALUE = 0;
parameter    C_M_AXI_VOICE_REC_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_VOICE_REC_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_VOICE_REC_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_voice_rec_AWVALID;
input   m_axi_voice_rec_AWREADY;
output  [C_M_AXI_VOICE_REC_ADDR_WIDTH - 1:0] m_axi_voice_rec_AWADDR;
output  [C_M_AXI_VOICE_REC_ID_WIDTH - 1:0] m_axi_voice_rec_AWID;
output  [7:0] m_axi_voice_rec_AWLEN;
output  [2:0] m_axi_voice_rec_AWSIZE;
output  [1:0] m_axi_voice_rec_AWBURST;
output  [1:0] m_axi_voice_rec_AWLOCK;
output  [3:0] m_axi_voice_rec_AWCACHE;
output  [2:0] m_axi_voice_rec_AWPROT;
output  [3:0] m_axi_voice_rec_AWQOS;
output  [3:0] m_axi_voice_rec_AWREGION;
output  [C_M_AXI_VOICE_REC_AWUSER_WIDTH - 1:0] m_axi_voice_rec_AWUSER;
output   m_axi_voice_rec_WVALID;
input   m_axi_voice_rec_WREADY;
output  [C_M_AXI_VOICE_REC_DATA_WIDTH - 1:0] m_axi_voice_rec_WDATA;
output  [C_M_AXI_VOICE_REC_WSTRB_WIDTH - 1:0] m_axi_voice_rec_WSTRB;
output   m_axi_voice_rec_WLAST;
output  [C_M_AXI_VOICE_REC_ID_WIDTH - 1:0] m_axi_voice_rec_WID;
output  [C_M_AXI_VOICE_REC_WUSER_WIDTH - 1:0] m_axi_voice_rec_WUSER;
output   m_axi_voice_rec_ARVALID;
input   m_axi_voice_rec_ARREADY;
output  [C_M_AXI_VOICE_REC_ADDR_WIDTH - 1:0] m_axi_voice_rec_ARADDR;
output  [C_M_AXI_VOICE_REC_ID_WIDTH - 1:0] m_axi_voice_rec_ARID;
output  [7:0] m_axi_voice_rec_ARLEN;
output  [2:0] m_axi_voice_rec_ARSIZE;
output  [1:0] m_axi_voice_rec_ARBURST;
output  [1:0] m_axi_voice_rec_ARLOCK;
output  [3:0] m_axi_voice_rec_ARCACHE;
output  [2:0] m_axi_voice_rec_ARPROT;
output  [3:0] m_axi_voice_rec_ARQOS;
output  [3:0] m_axi_voice_rec_ARREGION;
output  [C_M_AXI_VOICE_REC_ARUSER_WIDTH - 1:0] m_axi_voice_rec_ARUSER;
input   m_axi_voice_rec_RVALID;
output   m_axi_voice_rec_RREADY;
input  [C_M_AXI_VOICE_REC_DATA_WIDTH - 1:0] m_axi_voice_rec_RDATA;
input   m_axi_voice_rec_RLAST;
input  [C_M_AXI_VOICE_REC_ID_WIDTH - 1:0] m_axi_voice_rec_RID;
input  [C_M_AXI_VOICE_REC_RUSER_WIDTH - 1:0] m_axi_voice_rec_RUSER;
input  [1:0] m_axi_voice_rec_RRESP;
input   m_axi_voice_rec_BVALID;
output   m_axi_voice_rec_BREADY;
input  [1:0] m_axi_voice_rec_BRESP;
input  [C_M_AXI_VOICE_REC_ID_WIDTH - 1:0] m_axi_voice_rec_BID;
input  [C_M_AXI_VOICE_REC_BUSER_WIDTH - 1:0] m_axi_voice_rec_BUSER;
output  [31:0] guess;
input   s_axi_voice_rec_AWVALID;
output   s_axi_voice_rec_AWREADY;
input  [C_S_AXI_VOICE_REC_ADDR_WIDTH - 1:0] s_axi_voice_rec_AWADDR;
input   s_axi_voice_rec_WVALID;
output   s_axi_voice_rec_WREADY;
input  [C_S_AXI_VOICE_REC_DATA_WIDTH - 1:0] s_axi_voice_rec_WDATA;
input  [C_S_AXI_VOICE_REC_WSTRB_WIDTH - 1:0] s_axi_voice_rec_WSTRB;
input   s_axi_voice_rec_ARVALID;
output   s_axi_voice_rec_ARREADY;
input  [C_S_AXI_VOICE_REC_ADDR_WIDTH - 1:0] s_axi_voice_rec_ARADDR;
output   s_axi_voice_rec_RVALID;
input   s_axi_voice_rec_RREADY;
output  [C_S_AXI_VOICE_REC_DATA_WIDTH - 1:0] s_axi_voice_rec_RDATA;
output  [1:0] s_axi_voice_rec_RRESP;
output   s_axi_voice_rec_BVALID;
input   s_axi_voice_rec_BREADY;
output  [1:0] s_axi_voice_rec_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [231:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] new_sample;
reg   [31:0] guess_1_data_reg;
reg    guess_1_vld_reg;
reg    guess_1_vld_in;
reg    guess_1_ack_in;
reg   [12:0] testSound_address0;
reg    testSound_ce0;
reg    testSound_we0;
wire   [31:0] testSound_q0;
reg   [12:0] inSound_address0;
reg    inSound_ce0;
reg    inSound_we0;
wire   [31:0] inSound_q0;
reg   [9:0] result_address0;
reg    result_ce0;
reg    result_we0;
wire   [31:0] result_q0;
reg   [31:0] output_0;
reg   [31:0] output_1;
reg   [31:0] output_2;
reg   [31:0] ap_return;
reg    voice_rec_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    voice_rec_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond8_reg_1348;
wire    voice_rec_AWREADY;
wire    voice_rec_WREADY;
reg    voice_rec_ARVALID;
wire    voice_rec_ARREADY;
wire   [31:0] voice_rec_ARADDR;
wire    voice_rec_RVALID;
reg    voice_rec_RREADY;
wire   [31:0] voice_rec_RDATA;
wire    voice_rec_RLAST;
wire   [0:0] voice_rec_RID;
wire   [0:0] voice_rec_RUSER;
wire   [1:0] voice_rec_RRESP;
wire    voice_rec_BVALID;
wire   [1:0] voice_rec_BRESP;
wire   [0:0] voice_rec_BID;
wire   [0:0] voice_rec_BUSER;
reg   [12:0] indvar_reg_535;
reg   [12:0] indvar_reg_535_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] reg_824;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state229;
reg   [29:0] new_sample1_reg_1337;
reg    ap_sig_ioackin_voice_rec_ARREADY;
wire   [0:0] exitcond8_fu_849_p2;
reg   [0:0] exitcond8_reg_1348_pp0_iter1_reg;
wire   [12:0] indvar_next_fu_855_p2;
reg   [12:0] indvar_next_reg_1352;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] voice_rec_addr_read_reg_1357;
wire   [12:0] i_1_fu_872_p2;
reg   [12:0] i_1_reg_1365;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_1_fu_878_p1;
reg   [63:0] tmp_1_reg_1370;
wire   [0:0] exitcond2_fu_866_p2;
reg   [31:0] testSound_load_reg_1380;
wire    ap_CS_fsm_state14;
wire   [31:0] tmp_2_fu_883_p2;
reg   [31:0] tmp_2_reg_1385;
wire    ap_CS_fsm_state15;
wire   [63:0] grp_fu_821_p1;
reg   [63:0] tmp_3_reg_1390;
wire    ap_CS_fsm_state23;
wire   [63:0] grp_fu_816_p2;
reg   [63:0] tmp_4_reg_1395;
wire    ap_CS_fsm_state82;
wire   [31:0] grp_fu_805_p1;
reg   [31:0] tmp_5_reg_1400;
wire    ap_CS_fsm_state85;
wire   [0:0] notlhs_fu_906_p2;
reg   [0:0] notlhs_reg_1405;
wire    ap_CS_fsm_state88;
wire   [0:0] notrhs_fu_912_p2;
reg   [0:0] notrhs_reg_1410;
wire   [0:0] grp_fu_808_p2;
reg   [0:0] tmp_10_reg_1415;
wire    ap_CS_fsm_state90;
wire   [0:0] tmp_11_fu_922_p2;
reg   [0:0] tmp_11_reg_1420;
wire    ap_CS_fsm_state91;
wire   [5:0] i_3_fu_933_p2;
reg   [5:0] i_3_reg_1427;
wire    ap_CS_fsm_state213;
wire   [10:0] tmp_28_fu_963_p2;
reg   [10:0] tmp_28_reg_1432;
wire   [0:0] exitcond1_i_fu_927_p2;
wire   [3:0] j_fu_979_p2;
reg   [3:0] j_reg_1440;
wire    ap_CS_fsm_state214;
wire  signed [10:0] tmp_37_fu_985_p2;
reg  signed [10:0] tmp_37_reg_1445;
wire   [0:0] exitcond_i_fu_973_p2;
wire    ap_CS_fsm_state215;
reg   [31:0] result_load_reg_1456;
wire    ap_CS_fsm_state216;
wire   [31:0] guess_i_cast6_fu_1002_p1;
reg   [31:0] guess_i_cast6_reg_1461;
wire    ap_CS_fsm_state219;
wire   [1:0] j_1_fu_1012_p2;
reg   [1:0] j_1_reg_1469;
wire   [31:0] max_fu_1030_p5;
reg   [31:0] max_reg_1474;
wire   [0:0] exitcond_i1_fu_1006_p2;
reg   [0:0] tmp_32_reg_1481;
wire    ap_CS_fsm_state222;
wire   [31:0] guess_2_fu_1124_p3;
wire    ap_CS_fsm_state223;
wire   [31:0] max_1_fu_1131_p3;
wire   [0:0] notlhs2_fu_1156_p2;
reg   [0:0] notlhs2_reg_1496;
wire    ap_CS_fsm_state225;
wire   [0:0] notrhs2_fu_1162_p2;
reg   [0:0] notrhs2_reg_1501;
reg   [0:0] tmp_20_reg_1506;
wire   [0:0] sel_tmp4_i_fu_1168_p2;
reg   [0:0] sel_tmp4_i_reg_1511;
wire   [3:0] classification_fu_1254_p3;
reg   [3:0] classification_reg_1516;
wire    ap_CS_fsm_state226;
wire   [31:0] p_0_i_cast5_fu_1262_p1;
wire   [31:0] p_0_cast_fu_1271_p1;
wire    ap_CS_fsm_state227;
wire   [12:0] i_2_fu_1281_p2;
reg   [12:0] i_2_reg_1533;
wire    ap_CS_fsm_state228;
wire   [0:0] tmp_7_fu_1275_p2;
wire   [0:0] notlhs1_fu_1310_p2;
reg   [0:0] notlhs1_reg_1543;
wire    ap_CS_fsm_state230;
wire   [0:0] notrhs1_fu_1316_p2;
reg   [0:0] notrhs1_reg_1548;
reg   [0:0] tmp_15_reg_1553;
wire    ap_CS_fsm_state232;
wire   [12:0] tmp_8_fu_1331_p2;
wire    ap_CS_fsm_state233;
wire   [0:0] tmp_16_fu_1326_p2;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
reg   [9:0] flatInput_address0;
reg    flatInput_ce0;
reg    flatInput_we0;
wire   [31:0] flatInput_q0;
reg    flatInput_ce1;
wire   [31:0] flatInput_q1;
wire    grp_feedForward_fu_640_ap_start;
wire    grp_feedForward_fu_640_ap_done;
wire    grp_feedForward_fu_640_ap_idle;
wire    grp_feedForward_fu_640_ap_ready;
wire   [9:0] grp_feedForward_fu_640_pattern_address0;
wire    grp_feedForward_fu_640_pattern_ce0;
wire   [9:0] grp_feedForward_fu_640_pattern_address1;
wire    grp_feedForward_fu_640_pattern_ce1;
wire   [31:0] grp_feedForward_fu_640_output_0;
wire    grp_feedForward_fu_640_output_0_ap_vld;
wire   [31:0] grp_feedForward_fu_640_output_1;
wire    grp_feedForward_fu_640_output_1_ap_vld;
wire   [31:0] grp_feedForward_fu_640_output_2;
wire    grp_feedForward_fu_640_output_2_ap_vld;
wire    grp_processChunk_fu_659_ap_start;
wire    grp_processChunk_fu_659_ap_done;
wire    grp_processChunk_fu_659_ap_idle;
wire    grp_processChunk_fu_659_ap_ready;
reg   [13:0] grp_processChunk_fu_659_sp;
wire   [9:0] grp_processChunk_fu_659_ret_address0;
wire    grp_processChunk_fu_659_ret_ce0;
wire    grp_processChunk_fu_659_ret_we0;
wire   [31:0] grp_processChunk_fu_659_ret_d0;
reg   [6:0] grp_processChunk_fu_659_ret_offset;
wire   [12:0] grp_processChunk_fu_659_inputSound_address0;
wire    grp_processChunk_fu_659_inputSound_ce0;
reg   [12:0] ap_phi_mux_indvar_phi_fu_539_p4;
reg   [12:0] i_reg_547;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state12;
reg   [5:0] i_i_reg_558;
wire    ap_CS_fsm_state212;
reg   [3:0] j_i_reg_569;
wire    ap_CS_fsm_state217;
reg   [1:0] guess_1_reg_580;
wire    ap_CS_fsm_state218;
reg   [31:0] guess_i_reg_591;
reg   [31:0] second_max_reg_603;
wire   [12:0] p_0_i_cast_cast_fu_1267_p1;
reg   [12:0] ap_phi_mux_p_0_phi_fu_619_p6;
reg   [12:0] p_0_reg_615;
reg   [12:0] i2_reg_628;
reg    grp_feedForward_fu_640_ap_start_reg;
reg    grp_processChunk_fu_659_ap_start_reg;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state115;
wire    ap_CS_fsm_state117;
wire    ap_CS_fsm_state119;
wire    ap_CS_fsm_state121;
wire    ap_CS_fsm_state123;
wire    ap_CS_fsm_state125;
wire    ap_CS_fsm_state127;
wire    ap_CS_fsm_state129;
wire    ap_CS_fsm_state131;
wire    ap_CS_fsm_state133;
wire    ap_CS_fsm_state135;
wire    ap_CS_fsm_state137;
wire    ap_CS_fsm_state139;
wire    ap_CS_fsm_state141;
wire    ap_CS_fsm_state143;
wire    ap_CS_fsm_state145;
wire    ap_CS_fsm_state147;
wire    ap_CS_fsm_state149;
wire    ap_CS_fsm_state151;
wire    ap_CS_fsm_state153;
wire    ap_CS_fsm_state155;
wire    ap_CS_fsm_state157;
wire    ap_CS_fsm_state159;
wire    ap_CS_fsm_state161;
wire    ap_CS_fsm_state163;
wire    ap_CS_fsm_state165;
wire    ap_CS_fsm_state167;
wire    ap_CS_fsm_state169;
wire    ap_CS_fsm_state171;
wire    ap_CS_fsm_state173;
wire    ap_CS_fsm_state175;
wire    ap_CS_fsm_state177;
wire    ap_CS_fsm_state179;
wire    ap_CS_fsm_state181;
wire    ap_CS_fsm_state183;
wire    ap_CS_fsm_state185;
wire    ap_CS_fsm_state187;
wire    ap_CS_fsm_state189;
wire    ap_CS_fsm_state191;
wire    ap_CS_fsm_state193;
wire    ap_CS_fsm_state195;
wire    ap_CS_fsm_state197;
wire    ap_CS_fsm_state199;
wire    ap_CS_fsm_state201;
wire    ap_CS_fsm_state203;
wire    ap_CS_fsm_state205;
wire    ap_CS_fsm_state207;
wire    ap_CS_fsm_state209;
wire    ap_CS_fsm_state211;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_state118;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state122;
wire    ap_CS_fsm_state124;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state128;
wire    ap_CS_fsm_state130;
wire    ap_CS_fsm_state132;
wire    ap_CS_fsm_state134;
wire    ap_CS_fsm_state136;
wire    ap_CS_fsm_state138;
wire    ap_CS_fsm_state140;
wire    ap_CS_fsm_state142;
wire    ap_CS_fsm_state144;
wire    ap_CS_fsm_state146;
wire    ap_CS_fsm_state148;
wire    ap_CS_fsm_state150;
wire    ap_CS_fsm_state152;
wire    ap_CS_fsm_state154;
wire    ap_CS_fsm_state156;
wire    ap_CS_fsm_state158;
wire    ap_CS_fsm_state160;
wire    ap_CS_fsm_state162;
wire    ap_CS_fsm_state164;
wire    ap_CS_fsm_state166;
wire    ap_CS_fsm_state168;
wire    ap_CS_fsm_state170;
wire    ap_CS_fsm_state172;
wire    ap_CS_fsm_state174;
wire    ap_CS_fsm_state176;
wire    ap_CS_fsm_state178;
wire    ap_CS_fsm_state180;
wire    ap_CS_fsm_state182;
wire    ap_CS_fsm_state184;
wire    ap_CS_fsm_state186;
wire    ap_CS_fsm_state188;
wire    ap_CS_fsm_state190;
wire    ap_CS_fsm_state192;
wire    ap_CS_fsm_state194;
wire    ap_CS_fsm_state196;
wire    ap_CS_fsm_state198;
wire    ap_CS_fsm_state200;
wire    ap_CS_fsm_state202;
wire    ap_CS_fsm_state204;
wire    ap_CS_fsm_state206;
wire    ap_CS_fsm_state208;
wire    ap_CS_fsm_state210;
wire   [63:0] indvar9_fu_861_p1;
wire  signed [63:0] tmp_37_cast_fu_990_p1;
wire   [63:0] tmp_69_i_fu_997_p1;
wire   [63:0] tmp_s_fu_1287_p1;
wire   [63:0] tmp_6_fu_839_p1;
reg    ap_reg_ioackin_voice_rec_ARREADY;
wire    ap_CS_fsm_state83;
reg   [31:0] grp_fu_808_p0;
reg   [31:0] grp_fu_808_p1;
wire    ap_CS_fsm_state220;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state16;
wire   [31:0] inSound_load_to_int_fu_888_p1;
wire   [7:0] tmp_fu_892_p4;
wire   [22:0] tmp_13_fu_902_p1;
wire   [0:0] tmp_9_fu_918_p2;
wire   [9:0] tmp_24_fu_939_p3;
wire   [6:0] tmp_26_fu_951_p3;
wire   [10:0] p_shl_cast_fu_947_p1;
wire   [10:0] p_shl3_cast_fu_959_p1;
wire   [10:0] j_i_cast8_fu_969_p1;
wire  signed [31:0] tmp_68_i_cast_fu_994_p1;
wire   [31:0] p_to_int_fu_1042_p1;
wire   [31:0] second_max_i_to_int_fu_1059_p1;
wire   [7:0] tmp_25_fu_1045_p4;
wire   [22:0] tmp_35_fu_1055_p1;
wire   [0:0] notrhs3_fu_1083_p2;
wire   [0:0] notlhs3_fu_1077_p2;
wire   [7:0] tmp_27_fu_1063_p4;
wire   [22:0] tmp_36_fu_1073_p1;
wire   [0:0] notrhs4_fu_1101_p2;
wire   [0:0] notlhs4_fu_1095_p2;
wire   [0:0] tmp_29_fu_1089_p2;
wire   [0:0] tmp_30_fu_1107_p2;
wire   [0:0] tmp_31_fu_1113_p2;
wire   [0:0] tmp_33_fu_1119_p2;
wire   [31:0] second_max_i_to_int1_fu_1138_p1;
wire   [7:0] tmp_17_fu_1142_p4;
wire   [22:0] tmp_34_fu_1152_p1;
wire   [0:0] tmp_19_fu_1174_p2;
wire   [0:0] tmp_21_fu_1178_p2;
wire   [0:0] sel_tmp_i_fu_1183_p2;
wire   [0:0] sel_tmp1_i_fu_1189_p2;
wire   [0:0] sel_tmp6_i_fu_1201_p2;
wire   [0:0] sel_tmp2_i_fu_1195_p2;
wire   [0:0] tmp_22_fu_1214_p2;
wire   [3:0] sel_tmp3_i_cast_fu_1206_p3;
wire   [0:0] sel_tmp9_i_fu_1228_p2;
wire   [0:0] sel_tmp11_i_fu_1234_p2;
wire   [0:0] tmp_23_fu_1248_p2;
wire   [3:0] sel_tmp8_i_fu_1240_p3;
wire   [3:0] sel_tmp7_i_fu_1220_p3;
wire   [31:0] inSound_load_1_to_in_fu_1292_p1;
wire   [7:0] tmp_12_fu_1296_p4;
wire   [22:0] tmp_18_fu_1306_p1;
wire   [0:0] tmp_14_fu_1322_p2;
reg   [4:0] grp_fu_808_opcode;
wire    ap_CS_fsm_state234;
reg   [231:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 232'd1;
#0 guess_1_data_reg = 32'd0;
#0 guess_1_vld_reg = 1'b0;
#0 output_0 = 32'd0;
#0 output_1 = 32'd0;
#0 output_2 = 32'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 grp_feedForward_fu_640_ap_start_reg = 1'b0;
#0 grp_processChunk_fu_659_ap_start_reg = 1'b0;
#0 ap_reg_ioackin_voice_rec_ARREADY = 1'b0;
end

voicerec_testSound #(
    .DataWidth( 32 ),
    .AddressRange( 8000 ),
    .AddressWidth( 13 ))
testSound_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(testSound_address0),
    .ce0(testSound_ce0),
    .we0(testSound_we0),
    .d0(voice_rec_addr_read_reg_1357),
    .q0(testSound_q0)
);

voicerec_testSound #(
    .DataWidth( 32 ),
    .AddressRange( 8000 ),
    .AddressWidth( 13 ))
inSound_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(inSound_address0),
    .ce0(inSound_ce0),
    .we0(inSound_we0),
    .d0(tmp_5_reg_1400),
    .q0(inSound_q0)
);

voicerec_result #(
    .DataWidth( 32 ),
    .AddressRange( 882 ),
    .AddressWidth( 10 ))
result_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(result_address0),
    .ce0(result_ce0),
    .we0(result_we0),
    .d0(grp_processChunk_fu_659_ret_d0),
    .q0(result_q0)
);

voicerec_voice_rec_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_VOICE_REC_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_VOICE_REC_DATA_WIDTH ))
voicerec_voice_rec_s_axi_U(
    .AWVALID(s_axi_voice_rec_AWVALID),
    .AWREADY(s_axi_voice_rec_AWREADY),
    .AWADDR(s_axi_voice_rec_AWADDR),
    .WVALID(s_axi_voice_rec_WVALID),
    .WREADY(s_axi_voice_rec_WREADY),
    .WDATA(s_axi_voice_rec_WDATA),
    .WSTRB(s_axi_voice_rec_WSTRB),
    .ARVALID(s_axi_voice_rec_ARVALID),
    .ARREADY(s_axi_voice_rec_ARREADY),
    .ARADDR(s_axi_voice_rec_ARADDR),
    .RVALID(s_axi_voice_rec_RVALID),
    .RREADY(s_axi_voice_rec_RREADY),
    .RDATA(s_axi_voice_rec_RDATA),
    .RRESP(s_axi_voice_rec_RRESP),
    .BVALID(s_axi_voice_rec_BVALID),
    .BREADY(s_axi_voice_rec_BREADY),
    .BRESP(s_axi_voice_rec_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .new_sample(new_sample)
);

voicerec_voice_rec_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_VOICE_REC_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_VOICE_REC_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_VOICE_REC_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_VOICE_REC_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_VOICE_REC_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_VOICE_REC_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_VOICE_REC_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_VOICE_REC_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_VOICE_REC_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_VOICE_REC_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_VOICE_REC_CACHE_VALUE ))
voicerec_voice_rec_m_axi_U(
    .AWVALID(m_axi_voice_rec_AWVALID),
    .AWREADY(m_axi_voice_rec_AWREADY),
    .AWADDR(m_axi_voice_rec_AWADDR),
    .AWID(m_axi_voice_rec_AWID),
    .AWLEN(m_axi_voice_rec_AWLEN),
    .AWSIZE(m_axi_voice_rec_AWSIZE),
    .AWBURST(m_axi_voice_rec_AWBURST),
    .AWLOCK(m_axi_voice_rec_AWLOCK),
    .AWCACHE(m_axi_voice_rec_AWCACHE),
    .AWPROT(m_axi_voice_rec_AWPROT),
    .AWQOS(m_axi_voice_rec_AWQOS),
    .AWREGION(m_axi_voice_rec_AWREGION),
    .AWUSER(m_axi_voice_rec_AWUSER),
    .WVALID(m_axi_voice_rec_WVALID),
    .WREADY(m_axi_voice_rec_WREADY),
    .WDATA(m_axi_voice_rec_WDATA),
    .WSTRB(m_axi_voice_rec_WSTRB),
    .WLAST(m_axi_voice_rec_WLAST),
    .WID(m_axi_voice_rec_WID),
    .WUSER(m_axi_voice_rec_WUSER),
    .ARVALID(m_axi_voice_rec_ARVALID),
    .ARREADY(m_axi_voice_rec_ARREADY),
    .ARADDR(m_axi_voice_rec_ARADDR),
    .ARID(m_axi_voice_rec_ARID),
    .ARLEN(m_axi_voice_rec_ARLEN),
    .ARSIZE(m_axi_voice_rec_ARSIZE),
    .ARBURST(m_axi_voice_rec_ARBURST),
    .ARLOCK(m_axi_voice_rec_ARLOCK),
    .ARCACHE(m_axi_voice_rec_ARCACHE),
    .ARPROT(m_axi_voice_rec_ARPROT),
    .ARQOS(m_axi_voice_rec_ARQOS),
    .ARREGION(m_axi_voice_rec_ARREGION),
    .ARUSER(m_axi_voice_rec_ARUSER),
    .RVALID(m_axi_voice_rec_RVALID),
    .RREADY(m_axi_voice_rec_RREADY),
    .RDATA(m_axi_voice_rec_RDATA),
    .RLAST(m_axi_voice_rec_RLAST),
    .RID(m_axi_voice_rec_RID),
    .RUSER(m_axi_voice_rec_RUSER),
    .RRESP(m_axi_voice_rec_RRESP),
    .BVALID(m_axi_voice_rec_BVALID),
    .BREADY(m_axi_voice_rec_BREADY),
    .BRESP(m_axi_voice_rec_BRESP),
    .BID(m_axi_voice_rec_BID),
    .BUSER(m_axi_voice_rec_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(voice_rec_ARVALID),
    .I_ARREADY(voice_rec_ARREADY),
    .I_ARADDR(voice_rec_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd8000),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(voice_rec_RVALID),
    .I_RREADY(voice_rec_RREADY),
    .I_RDATA(voice_rec_RDATA),
    .I_RID(voice_rec_RID),
    .I_RUSER(voice_rec_RUSER),
    .I_RRESP(voice_rec_RRESP),
    .I_RLAST(voice_rec_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(voice_rec_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(voice_rec_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(voice_rec_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(voice_rec_BRESP),
    .I_BID(voice_rec_BID),
    .I_BUSER(voice_rec_BUSER)
);

voicerec_flatInput #(
    .DataWidth( 32 ),
    .AddressRange( 882 ),
    .AddressWidth( 10 ))
flatInput_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(flatInput_address0),
    .ce0(flatInput_ce0),
    .we0(flatInput_we0),
    .d0(result_load_reg_1456),
    .q0(flatInput_q0),
    .address1(grp_feedForward_fu_640_pattern_address1),
    .ce1(flatInput_ce1),
    .q1(flatInput_q1)
);

feedForward grp_feedForward_fu_640(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_feedForward_fu_640_ap_start),
    .ap_done(grp_feedForward_fu_640_ap_done),
    .ap_idle(grp_feedForward_fu_640_ap_idle),
    .ap_ready(grp_feedForward_fu_640_ap_ready),
    .pattern_address0(grp_feedForward_fu_640_pattern_address0),
    .pattern_ce0(grp_feedForward_fu_640_pattern_ce0),
    .pattern_q0(flatInput_q0),
    .pattern_address1(grp_feedForward_fu_640_pattern_address1),
    .pattern_ce1(grp_feedForward_fu_640_pattern_ce1),
    .pattern_q1(flatInput_q1),
    .output_0(grp_feedForward_fu_640_output_0),
    .output_0_ap_vld(grp_feedForward_fu_640_output_0_ap_vld),
    .output_1(grp_feedForward_fu_640_output_1),
    .output_1_ap_vld(grp_feedForward_fu_640_output_1_ap_vld),
    .output_2(grp_feedForward_fu_640_output_2),
    .output_2_ap_vld(grp_feedForward_fu_640_output_2_ap_vld)
);

processChunk grp_processChunk_fu_659(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_processChunk_fu_659_ap_start),
    .ap_done(grp_processChunk_fu_659_ap_done),
    .ap_idle(grp_processChunk_fu_659_ap_idle),
    .ap_ready(grp_processChunk_fu_659_ap_ready),
    .sp(grp_processChunk_fu_659_sp),
    .ret_address0(grp_processChunk_fu_659_ret_address0),
    .ret_ce0(grp_processChunk_fu_659_ret_ce0),
    .ret_we0(grp_processChunk_fu_659_ret_we0),
    .ret_d0(grp_processChunk_fu_659_ret_d0),
    .ret_offset(grp_processChunk_fu_659_ret_offset),
    .inputSound_address0(grp_processChunk_fu_659_inputSound_address0),
    .inputSound_ce0(grp_processChunk_fu_659_inputSound_ce0),
    .inputSound_q0(inSound_q0)
);

voicerec_fptrunc_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
voicerec_fptrunc_hbi_U56(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_4_reg_1395),
    .ce(1'b1),
    .dout(grp_fu_805_p1)
);

voicerec_fcmp_32njbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
voicerec_fcmp_32njbC_U57(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_808_p0),
    .din1(grp_fu_808_p1),
    .ce(1'b1),
    .opcode(grp_fu_808_opcode),
    .dout(grp_fu_808_p2)
);

voicerec_ddiv_64npcA #(
    .ID( 1 ),
    .NUM_STAGE( 59 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
voicerec_ddiv_64npcA_U58(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_reg_1390),
    .din1(64'd4652007308841189376),
    .ce(1'b1),
    .dout(grp_fu_816_p2)
);

voicerec_sitodp_3rcU #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
voicerec_sitodp_3rcU_U59(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_reg_1385),
    .ce(1'b1),
    .dout(grp_fu_821_p1)
);

voicerec_mux_32_3sc4 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
voicerec_mux_32_3sc4_U60(
    .din0(output_0),
    .din1(output_1),
    .din2(output_2),
    .din3(guess_1_reg_580),
    .dout(max_fu_1030_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_voice_rec_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_voice_rec_ARREADY == 1'b1)) begin
                ap_reg_ioackin_voice_rec_ARREADY <= 1'b0;
            end else if ((voice_rec_ARREADY == 1'b1)) begin
                ap_reg_ioackin_voice_rec_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_feedForward_fu_640_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond1_i_fu_927_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state213))) begin
            grp_feedForward_fu_640_ap_start_reg <= 1'b1;
        end else if ((grp_feedForward_fu_640_ap_ready == 1'b1)) begin
            grp_feedForward_fu_640_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_processChunk_fu_659_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state211) | (1'b1 == ap_CS_fsm_state209) | (1'b1 == ap_CS_fsm_state207) | (1'b1 == ap_CS_fsm_state205) | (1'b1 == ap_CS_fsm_state203) | (1'b1 == ap_CS_fsm_state201) | (1'b1 == ap_CS_fsm_state199) | (1'b1 == ap_CS_fsm_state197) | (1'b1 == ap_CS_fsm_state195) | (1'b1 == ap_CS_fsm_state193) | (1'b1 == ap_CS_fsm_state191) | (1'b1 == ap_CS_fsm_state189) | (1'b1 == ap_CS_fsm_state187) | (1'b1 == ap_CS_fsm_state185) | (1'b1 == ap_CS_fsm_state183) | (1'b1 == ap_CS_fsm_state181) | (1'b1 == ap_CS_fsm_state179) | (1'b1 == ap_CS_fsm_state177) | (1'b1 == ap_CS_fsm_state175) | (1'b1 == ap_CS_fsm_state173) | (1'b1 == ap_CS_fsm_state171) | (1'b1 == ap_CS_fsm_state169) | (1'b1 == ap_CS_fsm_state167) | (1'b1 == ap_CS_fsm_state165) | (1'b1 == ap_CS_fsm_state163) | (1'b1 == ap_CS_fsm_state161) | (1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state155) | (1'b1 == ap_CS_fsm_state153) | (1'b1 == ap_CS_fsm_state151) | (1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state133) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state113) | ((tmp_11_fu_922_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state91)))) begin
            grp_processChunk_fu_659_ap_start_reg <= 1'b1;
        end else if ((grp_processChunk_fu_659_ap_ready == 1'b1)) begin
            grp_processChunk_fu_659_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state223)) begin
        guess_1_reg_580 <= j_1_reg_1469;
    end else if (((grp_feedForward_fu_640_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state218))) begin
        guess_1_reg_580 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_11_fu_922_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state91))) begin
        i2_reg_628 <= 13'd0;
    end else if (((tmp_16_fu_1326_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state233))) begin
        i2_reg_628 <= i_2_reg_1533;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_973_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state214))) begin
        i_i_reg_558 <= i_3_reg_1427;
    end else if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state212))) begin
        i_i_reg_558 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_reg_547 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        i_reg_547 <= i_1_reg_1365;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond8_reg_1348 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_reg_535 <= indvar_next_reg_1352;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_reg_535 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_fu_927_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state213))) begin
        j_i_reg_569 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state217)) begin
        j_i_reg_569 <= j_reg_1440;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_16_fu_1326_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state233))) begin
        p_0_reg_615 <= tmp_8_fu_1331_p2;
    end else if (((tmp_11_reg_1420 == 1'd0) & (1'b1 == ap_CS_fsm_state227))) begin
        p_0_reg_615 <= p_0_i_cast_cast_fu_1267_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state223)) begin
        second_max_reg_603 <= max_1_fu_1131_p3;
    end else if (((grp_feedForward_fu_640_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state218))) begin
        second_max_reg_603 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state227)) begin
        ap_return[12 : 0] <= p_0_cast_fu_1271_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state226)) begin
        classification_reg_1516[1 : 0] <= classification_fu_1254_p3[1 : 0];
classification_reg_1516[3] <= classification_fu_1254_p3[3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond8_reg_1348 <= exitcond8_fu_849_p2;
        exitcond8_reg_1348_pp0_iter1_reg <= exitcond8_reg_1348;
        indvar_reg_535_pp0_iter1_reg <= indvar_reg_535;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (guess_1_vld_reg == 1'b0) & (guess_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (guess_1_vld_in == 1'b1) & (guess_1_vld_reg == 1'b1)))) begin
        guess_1_data_reg[1 : 0] <= p_0_i_cast5_fu_1262_p1[1 : 0];
guess_1_data_reg[3] <= p_0_i_cast5_fu_1262_p1[3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state219)) begin
        guess_i_cast6_reg_1461[1 : 0] <= guess_i_cast6_fu_1002_p1[1 : 0];
        j_1_reg_1469 <= j_1_fu_1012_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state223)) begin
        guess_i_reg_591 <= guess_2_fu_1124_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_1_reg_1365 <= i_1_fu_872_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state228)) begin
        i_2_reg_1533 <= i_2_fu_1281_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state213)) begin
        i_3_reg_1427 <= i_3_fu_933_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_next_reg_1352 <= indvar_next_fu_855_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state214)) begin
        j_reg_1440 <= j_fu_979_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i1_fu_1006_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state219))) begin
        max_reg_1474 <= max_fu_1030_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        new_sample1_reg_1337 <= {{new_sample[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state230)) begin
        notlhs1_reg_1543 <= notlhs1_fu_1310_p2;
        notrhs1_reg_1548 <= notrhs1_fu_1316_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state225)) begin
        notlhs2_reg_1496 <= notlhs2_fu_1156_p2;
        notrhs2_reg_1501 <= notrhs2_fu_1162_p2;
        sel_tmp4_i_reg_1511 <= sel_tmp4_i_fu_1168_p2;
        tmp_20_reg_1506 <= grp_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        notlhs_reg_1405 <= notlhs_fu_906_p2;
        notrhs_reg_1410 <= notrhs_fu_912_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state218) & (grp_feedForward_fu_640_output_0_ap_vld == 1'b1))) begin
        output_0 <= grp_feedForward_fu_640_output_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state218) & (grp_feedForward_fu_640_output_1_ap_vld == 1'b1))) begin
        output_1 <= grp_feedForward_fu_640_output_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state218) & (grp_feedForward_fu_640_output_2_ap_vld == 1'b1))) begin
        output_2 <= grp_feedForward_fu_640_output_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state229) | (1'b1 == ap_CS_fsm_state87))) begin
        reg_824 <= inSound_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state216)) begin
        result_load_reg_1456 <= result_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        testSound_load_reg_1380 <= testSound_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        tmp_10_reg_1415 <= grp_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        tmp_11_reg_1420 <= tmp_11_fu_922_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state232)) begin
        tmp_15_reg_1553 <= grp_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_866_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        tmp_1_reg_1370[12 : 0] <= tmp_1_fu_878_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_fu_927_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state213))) begin
        tmp_28_reg_1432[10 : 1] <= tmp_28_fu_963_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_2_reg_1385 <= tmp_2_fu_883_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state222)) begin
        tmp_32_reg_1481 <= grp_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_973_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state214))) begin
        tmp_37_reg_1445 <= tmp_37_fu_985_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_3_reg_1390 <= grp_fu_821_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        tmp_4_reg_1395 <= grp_fu_816_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        tmp_5_reg_1400 <= grp_fu_805_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond8_reg_1348 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        voice_rec_addr_read_reg_1357 <= voice_rec_RDATA;
    end
end

always @ (*) begin
    if ((exitcond8_fu_849_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((guess_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state234))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond8_reg_1348 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_phi_fu_539_p4 = indvar_next_reg_1352;
    end else begin
        ap_phi_mux_indvar_phi_fu_539_p4 = indvar_reg_535;
    end
end

always @ (*) begin
    if (((tmp_11_reg_1420 == 1'd0) & (1'b1 == ap_CS_fsm_state227))) begin
        ap_phi_mux_p_0_phi_fu_619_p6 = p_0_i_cast_cast_fu_1267_p1;
    end else begin
        ap_phi_mux_p_0_phi_fu_619_p6 = p_0_reg_615;
    end
end

always @ (*) begin
    if (((guess_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state234))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_voice_rec_ARREADY == 1'b0)) begin
        ap_sig_ioackin_voice_rec_ARREADY = voice_rec_ARREADY;
    end else begin
        ap_sig_ioackin_voice_rec_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state217)) begin
        flatInput_address0 = tmp_69_i_fu_997_p1;
    end else if ((1'b1 == ap_CS_fsm_state218)) begin
        flatInput_address0 = grp_feedForward_fu_640_pattern_address0;
    end else begin
        flatInput_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state217)) begin
        flatInput_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state218)) begin
        flatInput_ce0 = grp_feedForward_fu_640_pattern_ce0;
    end else begin
        flatInput_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state218)) begin
        flatInput_ce1 = grp_feedForward_fu_640_pattern_ce1;
    end else begin
        flatInput_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state217)) begin
        flatInput_we0 = 1'b1;
    end else begin
        flatInput_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state220)) begin
        grp_fu_808_opcode = 5'd2;
    end else if (((exitcond_i1_fu_1006_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state219))) begin
        grp_fu_808_opcode = 5'd4;
    end else if (((1'b1 == ap_CS_fsm_state230) | (1'b1 == ap_CS_fsm_state88))) begin
        grp_fu_808_opcode = 5'd1;
    end else begin
        grp_fu_808_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state220)) begin
        grp_fu_808_p0 = max_reg_1474;
    end else if ((1'b1 == ap_CS_fsm_state219)) begin
        grp_fu_808_p0 = second_max_reg_603;
    end else if (((1'b1 == ap_CS_fsm_state230) | (1'b1 == ap_CS_fsm_state88))) begin
        grp_fu_808_p0 = reg_824;
    end else begin
        grp_fu_808_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state220)) begin
        grp_fu_808_p1 = second_max_reg_603;
    end else if ((1'b1 == ap_CS_fsm_state219)) begin
        grp_fu_808_p1 = 32'd1056964608;
    end else if (((1'b1 == ap_CS_fsm_state230) | (1'b1 == ap_CS_fsm_state88))) begin
        grp_fu_808_p1 = 32'd0;
    end else begin
        grp_fu_808_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state212)) begin
        grp_processChunk_fu_659_ret_offset = 7'd60;
    end else if ((1'b1 == ap_CS_fsm_state210)) begin
        grp_processChunk_fu_659_ret_offset = 7'd59;
    end else if ((1'b1 == ap_CS_fsm_state208)) begin
        grp_processChunk_fu_659_ret_offset = 7'd58;
    end else if ((1'b1 == ap_CS_fsm_state206)) begin
        grp_processChunk_fu_659_ret_offset = 7'd57;
    end else if ((1'b1 == ap_CS_fsm_state204)) begin
        grp_processChunk_fu_659_ret_offset = 7'd56;
    end else if ((1'b1 == ap_CS_fsm_state202)) begin
        grp_processChunk_fu_659_ret_offset = 7'd55;
    end else if ((1'b1 == ap_CS_fsm_state200)) begin
        grp_processChunk_fu_659_ret_offset = 7'd54;
    end else if ((1'b1 == ap_CS_fsm_state198)) begin
        grp_processChunk_fu_659_ret_offset = 7'd53;
    end else if ((1'b1 == ap_CS_fsm_state196)) begin
        grp_processChunk_fu_659_ret_offset = 7'd52;
    end else if ((1'b1 == ap_CS_fsm_state194)) begin
        grp_processChunk_fu_659_ret_offset = 7'd51;
    end else if ((1'b1 == ap_CS_fsm_state192)) begin
        grp_processChunk_fu_659_ret_offset = 7'd50;
    end else if ((1'b1 == ap_CS_fsm_state190)) begin
        grp_processChunk_fu_659_ret_offset = 7'd49;
    end else if ((1'b1 == ap_CS_fsm_state188)) begin
        grp_processChunk_fu_659_ret_offset = 7'd48;
    end else if ((1'b1 == ap_CS_fsm_state186)) begin
        grp_processChunk_fu_659_ret_offset = 7'd47;
    end else if ((1'b1 == ap_CS_fsm_state184)) begin
        grp_processChunk_fu_659_ret_offset = 7'd46;
    end else if ((1'b1 == ap_CS_fsm_state182)) begin
        grp_processChunk_fu_659_ret_offset = 7'd45;
    end else if ((1'b1 == ap_CS_fsm_state180)) begin
        grp_processChunk_fu_659_ret_offset = 7'd44;
    end else if ((1'b1 == ap_CS_fsm_state178)) begin
        grp_processChunk_fu_659_ret_offset = 7'd43;
    end else if ((1'b1 == ap_CS_fsm_state176)) begin
        grp_processChunk_fu_659_ret_offset = 7'd42;
    end else if ((1'b1 == ap_CS_fsm_state174)) begin
        grp_processChunk_fu_659_ret_offset = 7'd41;
    end else if ((1'b1 == ap_CS_fsm_state172)) begin
        grp_processChunk_fu_659_ret_offset = 7'd40;
    end else if ((1'b1 == ap_CS_fsm_state170)) begin
        grp_processChunk_fu_659_ret_offset = 7'd39;
    end else if ((1'b1 == ap_CS_fsm_state168)) begin
        grp_processChunk_fu_659_ret_offset = 7'd38;
    end else if ((1'b1 == ap_CS_fsm_state166)) begin
        grp_processChunk_fu_659_ret_offset = 7'd37;
    end else if ((1'b1 == ap_CS_fsm_state164)) begin
        grp_processChunk_fu_659_ret_offset = 7'd36;
    end else if ((1'b1 == ap_CS_fsm_state162)) begin
        grp_processChunk_fu_659_ret_offset = 7'd35;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        grp_processChunk_fu_659_ret_offset = 7'd34;
    end else if ((1'b1 == ap_CS_fsm_state158)) begin
        grp_processChunk_fu_659_ret_offset = 7'd33;
    end else if ((1'b1 == ap_CS_fsm_state156)) begin
        grp_processChunk_fu_659_ret_offset = 7'd32;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        grp_processChunk_fu_659_ret_offset = 7'd31;
    end else if ((1'b1 == ap_CS_fsm_state152)) begin
        grp_processChunk_fu_659_ret_offset = 7'd30;
    end else if ((1'b1 == ap_CS_fsm_state150)) begin
        grp_processChunk_fu_659_ret_offset = 7'd29;
    end else if ((1'b1 == ap_CS_fsm_state148)) begin
        grp_processChunk_fu_659_ret_offset = 7'd28;
    end else if ((1'b1 == ap_CS_fsm_state146)) begin
        grp_processChunk_fu_659_ret_offset = 7'd27;
    end else if ((1'b1 == ap_CS_fsm_state144)) begin
        grp_processChunk_fu_659_ret_offset = 7'd26;
    end else if ((1'b1 == ap_CS_fsm_state142)) begin
        grp_processChunk_fu_659_ret_offset = 7'd25;
    end else if ((1'b1 == ap_CS_fsm_state140)) begin
        grp_processChunk_fu_659_ret_offset = 7'd24;
    end else if ((1'b1 == ap_CS_fsm_state138)) begin
        grp_processChunk_fu_659_ret_offset = 7'd23;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        grp_processChunk_fu_659_ret_offset = 7'd22;
    end else if ((1'b1 == ap_CS_fsm_state134)) begin
        grp_processChunk_fu_659_ret_offset = 7'd21;
    end else if ((1'b1 == ap_CS_fsm_state132)) begin
        grp_processChunk_fu_659_ret_offset = 7'd20;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        grp_processChunk_fu_659_ret_offset = 7'd19;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        grp_processChunk_fu_659_ret_offset = 7'd18;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        grp_processChunk_fu_659_ret_offset = 7'd17;
    end else if ((1'b1 == ap_CS_fsm_state124)) begin
        grp_processChunk_fu_659_ret_offset = 7'd16;
    end else if ((1'b1 == ap_CS_fsm_state122)) begin
        grp_processChunk_fu_659_ret_offset = 7'd15;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        grp_processChunk_fu_659_ret_offset = 7'd14;
    end else if ((1'b1 == ap_CS_fsm_state118)) begin
        grp_processChunk_fu_659_ret_offset = 7'd13;
    end else if ((1'b1 == ap_CS_fsm_state116)) begin
        grp_processChunk_fu_659_ret_offset = 7'd12;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        grp_processChunk_fu_659_ret_offset = 7'd11;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        grp_processChunk_fu_659_ret_offset = 7'd10;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        grp_processChunk_fu_659_ret_offset = 7'd9;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        grp_processChunk_fu_659_ret_offset = 7'd8;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        grp_processChunk_fu_659_ret_offset = 7'd7;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        grp_processChunk_fu_659_ret_offset = 7'd6;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        grp_processChunk_fu_659_ret_offset = 7'd5;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        grp_processChunk_fu_659_ret_offset = 7'd4;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        grp_processChunk_fu_659_ret_offset = 7'd3;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        grp_processChunk_fu_659_ret_offset = 7'd2;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        grp_processChunk_fu_659_ret_offset = 7'd1;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        grp_processChunk_fu_659_ret_offset = 7'd0;
    end else begin
        grp_processChunk_fu_659_ret_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state212)) begin
        grp_processChunk_fu_659_sp = 14'd7680;
    end else if ((1'b1 == ap_CS_fsm_state210)) begin
        grp_processChunk_fu_659_sp = 14'd7552;
    end else if ((1'b1 == ap_CS_fsm_state208)) begin
        grp_processChunk_fu_659_sp = 14'd7424;
    end else if ((1'b1 == ap_CS_fsm_state206)) begin
        grp_processChunk_fu_659_sp = 14'd7296;
    end else if ((1'b1 == ap_CS_fsm_state204)) begin
        grp_processChunk_fu_659_sp = 14'd7168;
    end else if ((1'b1 == ap_CS_fsm_state202)) begin
        grp_processChunk_fu_659_sp = 14'd7040;
    end else if ((1'b1 == ap_CS_fsm_state200)) begin
        grp_processChunk_fu_659_sp = 14'd6912;
    end else if ((1'b1 == ap_CS_fsm_state198)) begin
        grp_processChunk_fu_659_sp = 14'd6784;
    end else if ((1'b1 == ap_CS_fsm_state196)) begin
        grp_processChunk_fu_659_sp = 14'd6656;
    end else if ((1'b1 == ap_CS_fsm_state194)) begin
        grp_processChunk_fu_659_sp = 14'd6528;
    end else if ((1'b1 == ap_CS_fsm_state192)) begin
        grp_processChunk_fu_659_sp = 14'd6400;
    end else if ((1'b1 == ap_CS_fsm_state190)) begin
        grp_processChunk_fu_659_sp = 14'd6272;
    end else if ((1'b1 == ap_CS_fsm_state188)) begin
        grp_processChunk_fu_659_sp = 14'd6144;
    end else if ((1'b1 == ap_CS_fsm_state186)) begin
        grp_processChunk_fu_659_sp = 14'd6016;
    end else if ((1'b1 == ap_CS_fsm_state184)) begin
        grp_processChunk_fu_659_sp = 14'd5888;
    end else if ((1'b1 == ap_CS_fsm_state182)) begin
        grp_processChunk_fu_659_sp = 14'd5760;
    end else if ((1'b1 == ap_CS_fsm_state180)) begin
        grp_processChunk_fu_659_sp = 14'd5632;
    end else if ((1'b1 == ap_CS_fsm_state178)) begin
        grp_processChunk_fu_659_sp = 14'd5504;
    end else if ((1'b1 == ap_CS_fsm_state176)) begin
        grp_processChunk_fu_659_sp = 14'd5376;
    end else if ((1'b1 == ap_CS_fsm_state174)) begin
        grp_processChunk_fu_659_sp = 14'd5248;
    end else if ((1'b1 == ap_CS_fsm_state172)) begin
        grp_processChunk_fu_659_sp = 14'd5120;
    end else if ((1'b1 == ap_CS_fsm_state170)) begin
        grp_processChunk_fu_659_sp = 14'd4992;
    end else if ((1'b1 == ap_CS_fsm_state168)) begin
        grp_processChunk_fu_659_sp = 14'd4864;
    end else if ((1'b1 == ap_CS_fsm_state166)) begin
        grp_processChunk_fu_659_sp = 14'd4736;
    end else if ((1'b1 == ap_CS_fsm_state164)) begin
        grp_processChunk_fu_659_sp = 14'd4608;
    end else if ((1'b1 == ap_CS_fsm_state162)) begin
        grp_processChunk_fu_659_sp = 14'd4480;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        grp_processChunk_fu_659_sp = 14'd4352;
    end else if ((1'b1 == ap_CS_fsm_state158)) begin
        grp_processChunk_fu_659_sp = 14'd4224;
    end else if ((1'b1 == ap_CS_fsm_state156)) begin
        grp_processChunk_fu_659_sp = 14'd4096;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        grp_processChunk_fu_659_sp = 14'd3968;
    end else if ((1'b1 == ap_CS_fsm_state152)) begin
        grp_processChunk_fu_659_sp = 14'd3840;
    end else if ((1'b1 == ap_CS_fsm_state150)) begin
        grp_processChunk_fu_659_sp = 14'd3712;
    end else if ((1'b1 == ap_CS_fsm_state148)) begin
        grp_processChunk_fu_659_sp = 14'd3584;
    end else if ((1'b1 == ap_CS_fsm_state146)) begin
        grp_processChunk_fu_659_sp = 14'd3456;
    end else if ((1'b1 == ap_CS_fsm_state144)) begin
        grp_processChunk_fu_659_sp = 14'd3328;
    end else if ((1'b1 == ap_CS_fsm_state142)) begin
        grp_processChunk_fu_659_sp = 14'd3200;
    end else if ((1'b1 == ap_CS_fsm_state140)) begin
        grp_processChunk_fu_659_sp = 14'd3072;
    end else if ((1'b1 == ap_CS_fsm_state138)) begin
        grp_processChunk_fu_659_sp = 14'd2944;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        grp_processChunk_fu_659_sp = 14'd2816;
    end else if ((1'b1 == ap_CS_fsm_state134)) begin
        grp_processChunk_fu_659_sp = 14'd2688;
    end else if ((1'b1 == ap_CS_fsm_state132)) begin
        grp_processChunk_fu_659_sp = 14'd2560;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        grp_processChunk_fu_659_sp = 14'd2432;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        grp_processChunk_fu_659_sp = 14'd2304;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        grp_processChunk_fu_659_sp = 14'd2176;
    end else if ((1'b1 == ap_CS_fsm_state124)) begin
        grp_processChunk_fu_659_sp = 14'd2048;
    end else if ((1'b1 == ap_CS_fsm_state122)) begin
        grp_processChunk_fu_659_sp = 14'd1920;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        grp_processChunk_fu_659_sp = 14'd1792;
    end else if ((1'b1 == ap_CS_fsm_state118)) begin
        grp_processChunk_fu_659_sp = 14'd1664;
    end else if ((1'b1 == ap_CS_fsm_state116)) begin
        grp_processChunk_fu_659_sp = 14'd1536;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        grp_processChunk_fu_659_sp = 14'd1408;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        grp_processChunk_fu_659_sp = 14'd1280;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        grp_processChunk_fu_659_sp = 14'd1152;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        grp_processChunk_fu_659_sp = 14'd1024;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        grp_processChunk_fu_659_sp = 14'd896;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        grp_processChunk_fu_659_sp = 14'd768;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        grp_processChunk_fu_659_sp = 14'd640;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        grp_processChunk_fu_659_sp = 14'd512;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        grp_processChunk_fu_659_sp = 14'd384;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        grp_processChunk_fu_659_sp = 14'd256;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        grp_processChunk_fu_659_sp = 14'd128;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        grp_processChunk_fu_659_sp = 14'd0;
    end else begin
        grp_processChunk_fu_659_sp = 'bx;
    end
end

always @ (*) begin
    if (((guess_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (guess_1_vld_reg == 1'b1)))) begin
        guess_1_ack_in = 1'b1;
    end else begin
        guess_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state226)) begin
        guess_1_vld_in = 1'b1;
    end else begin
        guess_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state228)) begin
        inSound_address0 = tmp_s_fu_1287_p1;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        inSound_address0 = tmp_1_reg_1370;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        inSound_address0 = 13'd7999;
    end else if (((1'b1 == ap_CS_fsm_state212) | (1'b1 == ap_CS_fsm_state210) | (1'b1 == ap_CS_fsm_state208) | (1'b1 == ap_CS_fsm_state206) | (1'b1 == ap_CS_fsm_state204) | (1'b1 == ap_CS_fsm_state202) | (1'b1 == ap_CS_fsm_state200) | (1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state196) | (1'b1 == ap_CS_fsm_state194) | (1'b1 == ap_CS_fsm_state192) | (1'b1 == ap_CS_fsm_state190) | (1'b1 == ap_CS_fsm_state188) | (1'b1 == ap_CS_fsm_state186) | (1'b1 == ap_CS_fsm_state184) | (1'b1 == ap_CS_fsm_state182) | (1'b1 == ap_CS_fsm_state180) | (1'b1 == ap_CS_fsm_state178) | (1'b1 == ap_CS_fsm_state176) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92))) begin
        inSound_address0 = grp_processChunk_fu_659_inputSound_address0;
    end else begin
        inSound_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state228) | (1'b1 == ap_CS_fsm_state13))) begin
        inSound_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state212) | (1'b1 == ap_CS_fsm_state210) | (1'b1 == ap_CS_fsm_state208) | (1'b1 == ap_CS_fsm_state206) | (1'b1 == ap_CS_fsm_state204) | (1'b1 == ap_CS_fsm_state202) | (1'b1 == ap_CS_fsm_state200) | (1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state196) | (1'b1 == ap_CS_fsm_state194) | (1'b1 == ap_CS_fsm_state192) | (1'b1 == ap_CS_fsm_state190) | (1'b1 == ap_CS_fsm_state188) | (1'b1 == ap_CS_fsm_state186) | (1'b1 == ap_CS_fsm_state184) | (1'b1 == ap_CS_fsm_state182) | (1'b1 == ap_CS_fsm_state180) | (1'b1 == ap_CS_fsm_state178) | (1'b1 == ap_CS_fsm_state176) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92))) begin
        inSound_ce0 = grp_processChunk_fu_659_inputSound_ce0;
    end else begin
        inSound_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        inSound_we0 = 1'b1;
    end else begin
        inSound_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state215)) begin
        result_address0 = tmp_37_cast_fu_990_p1;
    end else if (((1'b1 == ap_CS_fsm_state212) | (1'b1 == ap_CS_fsm_state210) | (1'b1 == ap_CS_fsm_state208) | (1'b1 == ap_CS_fsm_state206) | (1'b1 == ap_CS_fsm_state204) | (1'b1 == ap_CS_fsm_state202) | (1'b1 == ap_CS_fsm_state200) | (1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state196) | (1'b1 == ap_CS_fsm_state194) | (1'b1 == ap_CS_fsm_state192) | (1'b1 == ap_CS_fsm_state190) | (1'b1 == ap_CS_fsm_state188) | (1'b1 == ap_CS_fsm_state186) | (1'b1 == ap_CS_fsm_state184) | (1'b1 == ap_CS_fsm_state182) | (1'b1 == ap_CS_fsm_state180) | (1'b1 == ap_CS_fsm_state178) | (1'b1 == ap_CS_fsm_state176) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92))) begin
        result_address0 = grp_processChunk_fu_659_ret_address0;
    end else begin
        result_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state215)) begin
        result_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state212) | (1'b1 == ap_CS_fsm_state210) | (1'b1 == ap_CS_fsm_state208) | (1'b1 == ap_CS_fsm_state206) | (1'b1 == ap_CS_fsm_state204) | (1'b1 == ap_CS_fsm_state202) | (1'b1 == ap_CS_fsm_state200) | (1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state196) | (1'b1 == ap_CS_fsm_state194) | (1'b1 == ap_CS_fsm_state192) | (1'b1 == ap_CS_fsm_state190) | (1'b1 == ap_CS_fsm_state188) | (1'b1 == ap_CS_fsm_state186) | (1'b1 == ap_CS_fsm_state184) | (1'b1 == ap_CS_fsm_state182) | (1'b1 == ap_CS_fsm_state180) | (1'b1 == ap_CS_fsm_state178) | (1'b1 == ap_CS_fsm_state176) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92))) begin
        result_ce0 = grp_processChunk_fu_659_ret_ce0;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state212) | (1'b1 == ap_CS_fsm_state210) | (1'b1 == ap_CS_fsm_state208) | (1'b1 == ap_CS_fsm_state206) | (1'b1 == ap_CS_fsm_state204) | (1'b1 == ap_CS_fsm_state202) | (1'b1 == ap_CS_fsm_state200) | (1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state196) | (1'b1 == ap_CS_fsm_state194) | (1'b1 == ap_CS_fsm_state192) | (1'b1 == ap_CS_fsm_state190) | (1'b1 == ap_CS_fsm_state188) | (1'b1 == ap_CS_fsm_state186) | (1'b1 == ap_CS_fsm_state184) | (1'b1 == ap_CS_fsm_state182) | (1'b1 == ap_CS_fsm_state180) | (1'b1 == ap_CS_fsm_state178) | (1'b1 == ap_CS_fsm_state176) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state170) | (1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state166) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state160) | (1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state146) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92))) begin
        result_we0 = grp_processChunk_fu_659_ret_we0;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        testSound_address0 = tmp_1_fu_878_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        testSound_address0 = indvar9_fu_861_p1;
    end else begin
        testSound_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        testSound_ce0 = 1'b1;
    end else begin
        testSound_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond8_reg_1348_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        testSound_we0 = 1'b1;
    end else begin
        testSound_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_voice_rec_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        voice_rec_ARVALID = 1'b1;
    end else begin
        voice_rec_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond8_reg_1348 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        voice_rec_RREADY = 1'b1;
    end else begin
        voice_rec_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        voice_rec_blk_n_AR = m_axi_voice_rec_ARREADY;
    end else begin
        voice_rec_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond8_reg_1348 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        voice_rec_blk_n_R = m_axi_voice_rec_RVALID;
    end else begin
        voice_rec_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_voice_rec_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond8_fu_849_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond8_fu_849_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((exitcond2_fu_866_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            if (((tmp_11_fu_922_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state91))) begin
                ap_NS_fsm = ap_ST_fsm_state228;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end
        end
        ap_ST_fsm_state92 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state92))) begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state94))) begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state96))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state98))) begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state100))) begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state102))) begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state104))) begin
                ap_NS_fsm = ap_ST_fsm_state105;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state106))) begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state106;
            end
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state108))) begin
                ap_NS_fsm = ap_ST_fsm_state109;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state110))) begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state110;
            end
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state112))) begin
                ap_NS_fsm = ap_ST_fsm_state113;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state114))) begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state114;
            end
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state116))) begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state118))) begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state120))) begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state122))) begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state122;
            end
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state124))) begin
                ap_NS_fsm = ap_ST_fsm_state125;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state124;
            end
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state126))) begin
                ap_NS_fsm = ap_ST_fsm_state127;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state126;
            end
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state128))) begin
                ap_NS_fsm = ap_ST_fsm_state129;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state128;
            end
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state130))) begin
                ap_NS_fsm = ap_ST_fsm_state131;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state130;
            end
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state132))) begin
                ap_NS_fsm = ap_ST_fsm_state133;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state132;
            end
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state134))) begin
                ap_NS_fsm = ap_ST_fsm_state135;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state134;
            end
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state136))) begin
                ap_NS_fsm = ap_ST_fsm_state137;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state136;
            end
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state138))) begin
                ap_NS_fsm = ap_ST_fsm_state139;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state140))) begin
                ap_NS_fsm = ap_ST_fsm_state141;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state140;
            end
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state142))) begin
                ap_NS_fsm = ap_ST_fsm_state143;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state142;
            end
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state144))) begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state146))) begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state148))) begin
                ap_NS_fsm = ap_ST_fsm_state149;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state148;
            end
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state150))) begin
                ap_NS_fsm = ap_ST_fsm_state151;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state150;
            end
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state152))) begin
                ap_NS_fsm = ap_ST_fsm_state153;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state152;
            end
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state154))) begin
                ap_NS_fsm = ap_ST_fsm_state155;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state154;
            end
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state156))) begin
                ap_NS_fsm = ap_ST_fsm_state157;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state156;
            end
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state158))) begin
                ap_NS_fsm = ap_ST_fsm_state159;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state158;
            end
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state160))) begin
                ap_NS_fsm = ap_ST_fsm_state161;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state160;
            end
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state162))) begin
                ap_NS_fsm = ap_ST_fsm_state163;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state162;
            end
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state164))) begin
                ap_NS_fsm = ap_ST_fsm_state165;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state164;
            end
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state166))) begin
                ap_NS_fsm = ap_ST_fsm_state167;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state166;
            end
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state168))) begin
                ap_NS_fsm = ap_ST_fsm_state169;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state168;
            end
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state170))) begin
                ap_NS_fsm = ap_ST_fsm_state171;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state170;
            end
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state172))) begin
                ap_NS_fsm = ap_ST_fsm_state173;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state172;
            end
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state174))) begin
                ap_NS_fsm = ap_ST_fsm_state175;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state174;
            end
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state176))) begin
                ap_NS_fsm = ap_ST_fsm_state177;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state176;
            end
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state178))) begin
                ap_NS_fsm = ap_ST_fsm_state179;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state178;
            end
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state180))) begin
                ap_NS_fsm = ap_ST_fsm_state181;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state180;
            end
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state182))) begin
                ap_NS_fsm = ap_ST_fsm_state183;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state182;
            end
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state184))) begin
                ap_NS_fsm = ap_ST_fsm_state185;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state184;
            end
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state186))) begin
                ap_NS_fsm = ap_ST_fsm_state187;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state186;
            end
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state188))) begin
                ap_NS_fsm = ap_ST_fsm_state189;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state188;
            end
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state190))) begin
                ap_NS_fsm = ap_ST_fsm_state191;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state190;
            end
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state192))) begin
                ap_NS_fsm = ap_ST_fsm_state193;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state192;
            end
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state194))) begin
                ap_NS_fsm = ap_ST_fsm_state195;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state194;
            end
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state196))) begin
                ap_NS_fsm = ap_ST_fsm_state197;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state196;
            end
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state198))) begin
                ap_NS_fsm = ap_ST_fsm_state199;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state198;
            end
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state200))) begin
                ap_NS_fsm = ap_ST_fsm_state201;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state200;
            end
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state202))) begin
                ap_NS_fsm = ap_ST_fsm_state203;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state202;
            end
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state204))) begin
                ap_NS_fsm = ap_ST_fsm_state205;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state204;
            end
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state206))) begin
                ap_NS_fsm = ap_ST_fsm_state207;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state206;
            end
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state208))) begin
                ap_NS_fsm = ap_ST_fsm_state209;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state208;
            end
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state210))) begin
                ap_NS_fsm = ap_ST_fsm_state211;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state210;
            end
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            if (((grp_processChunk_fu_659_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state212))) begin
                ap_NS_fsm = ap_ST_fsm_state213;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state212;
            end
        end
        ap_ST_fsm_state213 : begin
            if (((exitcond1_i_fu_927_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state213))) begin
                ap_NS_fsm = ap_ST_fsm_state214;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state218;
            end
        end
        ap_ST_fsm_state214 : begin
            if (((exitcond_i_fu_973_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state214))) begin
                ap_NS_fsm = ap_ST_fsm_state213;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state215;
            end
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state218 : begin
            if (((grp_feedForward_fu_640_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state218))) begin
                ap_NS_fsm = ap_ST_fsm_state219;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state218;
            end
        end
        ap_ST_fsm_state219 : begin
            if (((exitcond_i1_fu_1006_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state219))) begin
                ap_NS_fsm = ap_ST_fsm_state224;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state220;
            end
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state234;
        end
        ap_ST_fsm_state228 : begin
            if (((tmp_7_fu_1275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state228))) begin
                ap_NS_fsm = ap_ST_fsm_state227;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state229;
            end
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state233 : begin
            if (((tmp_16_fu_1326_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state233))) begin
                ap_NS_fsm = ap_ST_fsm_state227;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state228;
            end
        end
        ap_ST_fsm_state234 : begin
            if (((guess_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state234))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state234;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd98];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd140];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state146 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state148 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state153 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state154 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state155 = ap_CS_fsm[32'd152];

assign ap_CS_fsm_state156 = ap_CS_fsm[32'd153];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd154];

assign ap_CS_fsm_state158 = ap_CS_fsm[32'd155];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd156];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd157];

assign ap_CS_fsm_state161 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state162 = ap_CS_fsm[32'd159];

assign ap_CS_fsm_state163 = ap_CS_fsm[32'd160];

assign ap_CS_fsm_state164 = ap_CS_fsm[32'd161];

assign ap_CS_fsm_state165 = ap_CS_fsm[32'd162];

assign ap_CS_fsm_state166 = ap_CS_fsm[32'd163];

assign ap_CS_fsm_state167 = ap_CS_fsm[32'd164];

assign ap_CS_fsm_state168 = ap_CS_fsm[32'd165];

assign ap_CS_fsm_state169 = ap_CS_fsm[32'd166];

assign ap_CS_fsm_state170 = ap_CS_fsm[32'd167];

assign ap_CS_fsm_state171 = ap_CS_fsm[32'd168];

assign ap_CS_fsm_state172 = ap_CS_fsm[32'd169];

assign ap_CS_fsm_state173 = ap_CS_fsm[32'd170];

assign ap_CS_fsm_state174 = ap_CS_fsm[32'd171];

assign ap_CS_fsm_state175 = ap_CS_fsm[32'd172];

assign ap_CS_fsm_state176 = ap_CS_fsm[32'd173];

assign ap_CS_fsm_state177 = ap_CS_fsm[32'd174];

assign ap_CS_fsm_state178 = ap_CS_fsm[32'd175];

assign ap_CS_fsm_state179 = ap_CS_fsm[32'd176];

assign ap_CS_fsm_state180 = ap_CS_fsm[32'd177];

assign ap_CS_fsm_state181 = ap_CS_fsm[32'd178];

assign ap_CS_fsm_state182 = ap_CS_fsm[32'd179];

assign ap_CS_fsm_state183 = ap_CS_fsm[32'd180];

assign ap_CS_fsm_state184 = ap_CS_fsm[32'd181];

assign ap_CS_fsm_state185 = ap_CS_fsm[32'd182];

assign ap_CS_fsm_state186 = ap_CS_fsm[32'd183];

assign ap_CS_fsm_state187 = ap_CS_fsm[32'd184];

assign ap_CS_fsm_state188 = ap_CS_fsm[32'd185];

assign ap_CS_fsm_state189 = ap_CS_fsm[32'd186];

assign ap_CS_fsm_state190 = ap_CS_fsm[32'd187];

assign ap_CS_fsm_state191 = ap_CS_fsm[32'd188];

assign ap_CS_fsm_state192 = ap_CS_fsm[32'd189];

assign ap_CS_fsm_state193 = ap_CS_fsm[32'd190];

assign ap_CS_fsm_state194 = ap_CS_fsm[32'd191];

assign ap_CS_fsm_state195 = ap_CS_fsm[32'd192];

assign ap_CS_fsm_state196 = ap_CS_fsm[32'd193];

assign ap_CS_fsm_state197 = ap_CS_fsm[32'd194];

assign ap_CS_fsm_state198 = ap_CS_fsm[32'd195];

assign ap_CS_fsm_state199 = ap_CS_fsm[32'd196];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state200 = ap_CS_fsm[32'd197];

assign ap_CS_fsm_state201 = ap_CS_fsm[32'd198];

assign ap_CS_fsm_state202 = ap_CS_fsm[32'd199];

assign ap_CS_fsm_state203 = ap_CS_fsm[32'd200];

assign ap_CS_fsm_state204 = ap_CS_fsm[32'd201];

assign ap_CS_fsm_state205 = ap_CS_fsm[32'd202];

assign ap_CS_fsm_state206 = ap_CS_fsm[32'd203];

assign ap_CS_fsm_state207 = ap_CS_fsm[32'd204];

assign ap_CS_fsm_state208 = ap_CS_fsm[32'd205];

assign ap_CS_fsm_state209 = ap_CS_fsm[32'd206];

assign ap_CS_fsm_state210 = ap_CS_fsm[32'd207];

assign ap_CS_fsm_state211 = ap_CS_fsm[32'd208];

assign ap_CS_fsm_state212 = ap_CS_fsm[32'd209];

assign ap_CS_fsm_state213 = ap_CS_fsm[32'd210];

assign ap_CS_fsm_state214 = ap_CS_fsm[32'd211];

assign ap_CS_fsm_state215 = ap_CS_fsm[32'd212];

assign ap_CS_fsm_state216 = ap_CS_fsm[32'd213];

assign ap_CS_fsm_state217 = ap_CS_fsm[32'd214];

assign ap_CS_fsm_state218 = ap_CS_fsm[32'd215];

assign ap_CS_fsm_state219 = ap_CS_fsm[32'd216];

assign ap_CS_fsm_state220 = ap_CS_fsm[32'd217];

assign ap_CS_fsm_state222 = ap_CS_fsm[32'd219];

assign ap_CS_fsm_state223 = ap_CS_fsm[32'd220];

assign ap_CS_fsm_state225 = ap_CS_fsm[32'd222];

assign ap_CS_fsm_state226 = ap_CS_fsm[32'd223];

assign ap_CS_fsm_state227 = ap_CS_fsm[32'd224];

assign ap_CS_fsm_state228 = ap_CS_fsm[32'd225];

assign ap_CS_fsm_state229 = ap_CS_fsm[32'd226];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state230 = ap_CS_fsm[32'd227];

assign ap_CS_fsm_state232 = ap_CS_fsm[32'd229];

assign ap_CS_fsm_state233 = ap_CS_fsm[32'd230];

assign ap_CS_fsm_state234 = ap_CS_fsm[32'd231];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd96];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond8_reg_1348 == 1'd0) & (voice_rec_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond8_reg_1348 == 1'd0) & (voice_rec_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((exitcond8_reg_1348 == 1'd0) & (voice_rec_RVALID == 1'b0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign classification_fu_1254_p3 = ((tmp_23_fu_1248_p2[0:0] === 1'b1) ? sel_tmp8_i_fu_1240_p3 : sel_tmp7_i_fu_1220_p3);

assign exitcond1_i_fu_927_p2 = ((i_i_reg_558 == 6'd63) ? 1'b1 : 1'b0);

assign exitcond2_fu_866_p2 = ((i_reg_547 == 13'd8000) ? 1'b1 : 1'b0);

assign exitcond8_fu_849_p2 = ((ap_phi_mux_indvar_phi_fu_539_p4 == 13'd8000) ? 1'b1 : 1'b0);

assign exitcond_i1_fu_1006_p2 = ((guess_1_reg_580 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_i_fu_973_p2 = ((j_i_reg_569 == 4'd14) ? 1'b1 : 1'b0);

assign grp_feedForward_fu_640_ap_start = grp_feedForward_fu_640_ap_start_reg;

assign grp_processChunk_fu_659_ap_start = grp_processChunk_fu_659_ap_start_reg;

assign guess = guess_1_data_reg;

assign guess_2_fu_1124_p3 = ((tmp_33_fu_1119_p2[0:0] === 1'b1) ? guess_i_cast6_reg_1461 : guess_i_reg_591);

assign guess_i_cast6_fu_1002_p1 = guess_1_reg_580;

assign i_1_fu_872_p2 = (i_reg_547 + 13'd1);

assign i_2_fu_1281_p2 = (i2_reg_628 + 13'd1);

assign i_3_fu_933_p2 = (i_i_reg_558 + 6'd1);

assign inSound_load_1_to_in_fu_1292_p1 = reg_824;

assign inSound_load_to_int_fu_888_p1 = reg_824;

assign indvar9_fu_861_p1 = indvar_reg_535_pp0_iter1_reg;

assign indvar_next_fu_855_p2 = (ap_phi_mux_indvar_phi_fu_539_p4 + 13'd1);

assign j_1_fu_1012_p2 = (guess_1_reg_580 + 2'd1);

assign j_fu_979_p2 = (j_i_reg_569 + 4'd1);

assign j_i_cast8_fu_969_p1 = j_i_reg_569;

assign max_1_fu_1131_p3 = ((tmp_33_fu_1119_p2[0:0] === 1'b1) ? max_reg_1474 : second_max_reg_603);

assign notlhs1_fu_1310_p2 = ((tmp_12_fu_1296_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs2_fu_1156_p2 = ((tmp_17_fu_1142_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs3_fu_1077_p2 = ((tmp_25_fu_1045_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs4_fu_1095_p2 = ((tmp_27_fu_1063_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_906_p2 = ((tmp_fu_892_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_1316_p2 = ((tmp_18_fu_1306_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs2_fu_1162_p2 = ((tmp_34_fu_1152_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs3_fu_1083_p2 = ((tmp_35_fu_1055_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs4_fu_1101_p2 = ((tmp_36_fu_1073_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_912_p2 = ((tmp_13_fu_902_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_0_cast_fu_1271_p1 = ap_phi_mux_p_0_phi_fu_619_p6;

assign p_0_i_cast5_fu_1262_p1 = classification_fu_1254_p3;

assign p_0_i_cast_cast_fu_1267_p1 = classification_reg_1516;

assign p_shl3_cast_fu_959_p1 = tmp_26_fu_951_p3;

assign p_shl_cast_fu_947_p1 = tmp_24_fu_939_p3;

assign p_to_int_fu_1042_p1 = max_reg_1474;

assign second_max_i_to_int1_fu_1138_p1 = second_max_reg_603;

assign second_max_i_to_int_fu_1059_p1 = second_max_reg_603;

assign sel_tmp11_i_fu_1234_p2 = (sel_tmp9_i_fu_1228_p2 & sel_tmp1_i_fu_1189_p2);

assign sel_tmp1_i_fu_1189_p2 = (tmp_21_fu_1178_p2 ^ 1'd1);

assign sel_tmp2_i_fu_1195_p2 = (sel_tmp_i_fu_1183_p2 & sel_tmp1_i_fu_1189_p2);

assign sel_tmp3_i_cast_fu_1206_p3 = ((sel_tmp6_i_fu_1201_p2[0:0] === 1'b1) ? 4'd2 : 4'd3);

assign sel_tmp4_i_fu_1168_p2 = ((guess_i_reg_591 == 32'd1) ? 1'b1 : 1'b0);

assign sel_tmp6_i_fu_1201_p2 = (sel_tmp4_i_reg_1511 & sel_tmp1_i_fu_1189_p2);

assign sel_tmp7_i_fu_1220_p3 = ((tmp_22_fu_1214_p2[0:0] === 1'b1) ? sel_tmp3_i_cast_fu_1206_p3 : 4'd9);

assign sel_tmp8_i_fu_1240_p3 = ((sel_tmp11_i_fu_1234_p2[0:0] === 1'b1) ? 4'd1 : 4'd8);

assign sel_tmp9_i_fu_1228_p2 = ((guess_i_reg_591 == 32'd0) ? 1'b1 : 1'b0);

assign sel_tmp_i_fu_1183_p2 = ((guess_i_reg_591 == 32'd2) ? 1'b1 : 1'b0);

assign tmp_11_fu_922_p2 = (tmp_9_fu_918_p2 & tmp_10_reg_1415);

assign tmp_12_fu_1296_p4 = {{inSound_load_1_to_in_fu_1292_p1[30:23]}};

assign tmp_13_fu_902_p1 = inSound_load_to_int_fu_888_p1[22:0];

assign tmp_14_fu_1322_p2 = (notrhs1_reg_1548 | notlhs1_reg_1543);

assign tmp_16_fu_1326_p2 = (tmp_15_reg_1553 & tmp_14_fu_1322_p2);

assign tmp_17_fu_1142_p4 = {{second_max_i_to_int1_fu_1138_p1[30:23]}};

assign tmp_18_fu_1306_p1 = inSound_load_1_to_in_fu_1292_p1[22:0];

assign tmp_19_fu_1174_p2 = (notrhs2_reg_1501 | notlhs2_reg_1496);

assign tmp_1_fu_878_p1 = i_reg_547;

assign tmp_21_fu_1178_p2 = (tmp_20_reg_1506 & tmp_19_fu_1174_p2);

assign tmp_22_fu_1214_p2 = (sel_tmp6_i_fu_1201_p2 | sel_tmp2_i_fu_1195_p2);

assign tmp_23_fu_1248_p2 = (tmp_21_fu_1178_p2 | sel_tmp11_i_fu_1234_p2);

assign tmp_24_fu_939_p3 = {{i_i_reg_558}, {4'd0}};

assign tmp_25_fu_1045_p4 = {{p_to_int_fu_1042_p1[30:23]}};

assign tmp_26_fu_951_p3 = {{i_i_reg_558}, {1'd0}};

assign tmp_27_fu_1063_p4 = {{second_max_i_to_int_fu_1059_p1[30:23]}};

assign tmp_28_fu_963_p2 = (p_shl_cast_fu_947_p1 - p_shl3_cast_fu_959_p1);

assign tmp_29_fu_1089_p2 = (notrhs3_fu_1083_p2 | notlhs3_fu_1077_p2);

assign tmp_2_fu_883_p2 = ($signed(testSound_load_reg_1380) + $signed(32'd4294960396));

assign tmp_30_fu_1107_p2 = (notrhs4_fu_1101_p2 | notlhs4_fu_1095_p2);

assign tmp_31_fu_1113_p2 = (tmp_30_fu_1107_p2 & tmp_29_fu_1089_p2);

assign tmp_33_fu_1119_p2 = (tmp_32_reg_1481 & tmp_31_fu_1113_p2);

assign tmp_34_fu_1152_p1 = second_max_i_to_int1_fu_1138_p1[22:0];

assign tmp_35_fu_1055_p1 = p_to_int_fu_1042_p1[22:0];

assign tmp_36_fu_1073_p1 = second_max_i_to_int_fu_1059_p1[22:0];

assign tmp_37_cast_fu_990_p1 = tmp_37_reg_1445;

assign tmp_37_fu_985_p2 = (tmp_28_reg_1432 + j_i_cast8_fu_969_p1);

assign tmp_68_i_cast_fu_994_p1 = tmp_37_reg_1445;

assign tmp_69_i_fu_997_p1 = $unsigned(tmp_68_i_cast_fu_994_p1);

assign tmp_6_fu_839_p1 = new_sample1_reg_1337;

assign tmp_7_fu_1275_p2 = ((i2_reg_628 < 13'd7999) ? 1'b1 : 1'b0);

assign tmp_8_fu_1331_p2 = (i2_reg_628 + 13'd10);

assign tmp_9_fu_918_p2 = (notrhs_reg_1410 | notlhs_reg_1405);

assign tmp_fu_892_p4 = {{inSound_load_to_int_fu_888_p1[30:23]}};

assign tmp_s_fu_1287_p1 = i2_reg_628;

assign voice_rec_ARADDR = tmp_6_fu_839_p1;

always @ (posedge ap_clk) begin
    guess_1_data_reg[2] <= 1'b0;
    guess_1_data_reg[31:4] <= 28'b0000000000000000000000000000;
    ap_return[31:13] <= 19'b0000000000000000000;
    tmp_1_reg_1370[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    tmp_28_reg_1432[0] <= 1'b0;
    guess_i_cast6_reg_1461[31:2] <= 30'b000000000000000000000000000000;
    classification_reg_1516[2] <= 1'b0;
end

endmodule //voicerec
