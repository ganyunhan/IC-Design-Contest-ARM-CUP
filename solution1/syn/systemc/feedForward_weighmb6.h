// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __feedForward_weighmb6_H__
#define __feedForward_weighmb6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct feedForward_weighmb6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 78;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(feedForward_weighmb6_ram) {
        ram[0] = "0b00111110001100000000000101010000";
        ram[1] = "0b10111100101001000011110001010101";
        ram[2] = "0b10111101110111010010110001111100";
        ram[3] = "0b00111110001010101000100001101010";
        ram[4] = "0b10111101101111010100000011101110";
        ram[5] = "0b10111011100111001110011011000001";
        ram[6] = "0b10111111001101101100010111110100";
        ram[7] = "0b10111111011101101101000001011111";
        ram[8] = "0b00111111100111111001000011101011";
        ram[9] = "0b10111101100110111101011111101000";
        ram[10] = "0b10111101101011101001000001101100";
        ram[11] = "0b10111110011001101111010010111111";
        ram[12] = "0b10111110100010010011011011100111";
        ram[13] = "0b00111101110000011110000111111010";
        ram[14] = "0b10111110101000101000011110100000";
        ram[15] = "0b10111111001100101101100110111110";
        ram[16] = "0b00111111100010110111001100011001";
        ram[17] = "0b10111111001110101001011100111001";
        ram[18] = "0b00111110000000111011100010100010";
        ram[19] = "0b00111110000001000111001011000001";
        ram[20] = "0b00111110000000000101011000111111";
        ram[21] = "0b00111101100001000110011110111110";
        ram[22] = "0b00111110001100111000111011110011";
        ram[23] = "0b10111101100111011110101011110101";
        ram[24] = "0b00111111001000110101000110001011";
        ram[25] = "0b00111110110001100110001011111110";
        ram[26] = "0b10111111011100100011011100100110";
        ram[27] = "0b00111101111101010001000011010100";
        ram[28] = "0b00111110001111000011010110001011";
        ram[29] = "0b10111101101011000011101110100000";
        ram[30] = "0b10111111101100100110010000011011";
        ram[31] = "0b00111111001101110111101010000001";
        ram[32] = "0b00111111010011000101101010100011";
        ram[33] = "0b00111101000100010001001001011100";
        ram[34] = "0b10111001111010011000111011000111";
        ram[35] = "0b10111101100000110010000001101110";
        ram[36] = "0b10110101100111001001101010011001";
        ram[37] = "0b10111101101101101100111101011101";
        ram[38] = "0b10111101101101110111100101110001";
        ram[39] = "0b10111101000100111110010010011110";
        ram[40] = "0b10111100111011111000110011101011";
        ram[41] = "0b10111110011110110110111011010110";
        ram[42] = "0b00111111000101100100101111101100";
        ram[43] = "0b10111111011010100011000111000110";
        ram[44] = "0b00111110101110111011111001100110";
        ram[45] = "0b00111110000000110001001001101111";
        ram[46] = "0b00111101011101011100001010001111";
        ram[47] = "0b00111110010000001000001100010010";
        ram[48] = "0b10111101100000110011100010011010";
        ram[49] = "0b00111110000011110011000011101000";
        ram[50] = "0b00111011100001100101011010000110";
        ram[51] = "0b00111111000010011011100001010110";
        ram[52] = "0b00111110101010001000111100000000";
        ram[53] = "0b10111111101001010111110000011100";
        ram[54] = "0b10111101100010110111111000100110";
        ram[55] = "0b10111110010111100111010101111001";
        ram[56] = "0b10111101100101101001100101000010";
        ram[57] = "0b10111100100000101111111101011001";
        ram[58] = "0b00111101111111011100100010111000";
        ram[59] = "0b10111101000000110011110110000111";
        ram[60] = "0b00111111001010100001000111101101";
        ram[61] = "0b10111111101100100000100111111111";
        ram[62] = "0b00111111000001000001100111110100";
        ram[63] = "0b10111110010111010100000110110111";
        ram[64] = "0b00111101010011111011011100101101";
        ram[65] = "0b10111100000110111010010010100001";
        ram[66] = "0b10111111001111110110010000010111";
        ram[67] = "0b00111110101100110001101101111010";
        ram[68] = "0b00111110101000011000110101101001";
        ram[69] = "0b00111101110001001001101110100110";
        ram[70] = "0b10111101001101000011100101011000";
        ram[71] = "0b10111101010101001111110111110100";
        ram[72] = "0b00111111010100010100100010101010";
        ram[73] = "0b10111110111111010110111111011011";
        ram[74] = "0b10111110100001001101111101101010";
        ram[75] = "0b00111110100110111011001111001000";
        ram[76] = "0b00111100110011101100100010000101";
        ram[77] = "0b00111100010111011101101000111011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(feedForward_weighmb6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 78;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


feedForward_weighmb6_ram* meminst;


SC_CTOR(feedForward_weighmb6) {
meminst = new feedForward_weighmb6_ram("feedForward_weighmb6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~feedForward_weighmb6() {
    delete meminst;
}


};//endmodule
#endif
